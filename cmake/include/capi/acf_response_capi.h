// Copyright (c) 2025 Admenri. All rights reserved.
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool and should not edited
// by hand. See the translator.README.txt file in the tools directory for
// more information.
//
// $hash=f7c6b7e7f3303e877485b54216f546200274291c$
//

#ifndef ACF_INCLUDE_CAPI_ACF_RESPONSE_CAPI_H_
#define ACF_INCLUDE_CAPI_ACF_RESPONSE_CAPI_H_
#pragma once

#include "include/capi/acf_base_capi.h"
#include "include/internal/acf_scoped_refptr.h"
#include "include/internal/acf_string.h"
#include "include/internal/acf_string_multimap.h"
#include "include/internal/acf_types_wrappers.h"

#ifdef __cplusplus
extern "C" {
#endif

///
/// Structure used to represent a web response. The functions of this structure
/// may be called on any thread.
///
typedef struct _acf_response_t {
  ///
  /// Base structure.
  ///
  acf_base_ref_counted_t base;

  ///
  /// Returns true (1) if this object is read-only.
  ///
  int(ACF_CALLBACK* is_read_only)(struct _acf_response_t* self);

  ///
  /// Set response data from other
  ///
  void(ACF_CALLBACK* set)(struct _acf_response_t* self,
                          struct _acf_response_t* other);

  ///
  /// Get the response error code. Returns ERR_NONE if there was no error.
  ///
  int(ACF_CALLBACK* get_error)(struct _acf_response_t* self);

  ///
  /// Set the response error code. This can be used by custom scheme handlers to
  /// return errors during initial request processing.
  ///
  void(ACF_CALLBACK* set_error)(struct _acf_response_t* self, int error);

  ///
  /// Get the response status code.
  ///
  int(ACF_CALLBACK* get_status)(struct _acf_response_t* self);

  ///
  /// Set the response status code.
  ///
  void(ACF_CALLBACK* set_status)(struct _acf_response_t* self, int status);

  ///
  /// Get the response status text.
  ///
  // The resulting string must be freed by calling acf_string_userfree_free().
  acf_string_userfree_t(ACF_CALLBACK* get_status_text)(
      struct _acf_response_t* self);

  ///
  /// Set the response status text.
  ///
  void(ACF_CALLBACK* set_status_text)(struct _acf_response_t* self,
                                      const acf_string_t* statusText);

  ///
  /// Get the response mime type.
  ///
  // The resulting string must be freed by calling acf_string_userfree_free().
  acf_string_userfree_t(ACF_CALLBACK* get_mime_type)(
      struct _acf_response_t* self);

  ///
  /// Set the response mime type.
  ///
  void(ACF_CALLBACK* set_mime_type)(struct _acf_response_t* self,
                                    const acf_string_t* mimeType);

  ///
  /// Get the response charset.
  ///
  // The resulting string must be freed by calling acf_string_userfree_free().
  acf_string_userfree_t(ACF_CALLBACK* get_charset)(
      struct _acf_response_t* self);

  ///
  /// Set the response charset.
  ///
  void(ACF_CALLBACK* set_charset)(struct _acf_response_t* self,
                                  const acf_string_t* charset);

  ///
  /// Get the value for the specified response header field.
  ///
  // The resulting string must be freed by calling acf_string_userfree_free().
  acf_string_userfree_t(ACF_CALLBACK* get_header_by_name)(
      struct _acf_response_t* self,
      const acf_string_t* name);

  ///
  /// Set the header |name| to |value|. If |overwrite| is true (1) any existing
  /// values will be replaced with the new value. If |overwrite| is false (0)
  /// any existing values will not be overwritten.
  ///
  void(ACF_CALLBACK* set_header_by_name)(struct _acf_response_t* self,
                                         const acf_string_t* name,
                                         const acf_string_t* value,
                                         int overwrite);

  ///
  /// Get all response header fields.
  ///
  void(ACF_CALLBACK* get_header_map)(struct _acf_response_t* self,
                                     acf_string_multimap_t headerMap);

  ///
  /// Set all response header fields.
  ///
  void(ACF_CALLBACK* set_header_map)(struct _acf_response_t* self,
                                     acf_string_multimap_t headerMap);

  ///
  /// Get the resolved URL after redirects or changed as a result of HSTS.
  ///
  // The resulting string must be freed by calling acf_string_userfree_free().
  acf_string_userfree_t(ACF_CALLBACK* get_url)(struct _acf_response_t* self);

  ///
  /// Set the resolved URL after redirects or changed as a result of HSTS.
  ///
  void(ACF_CALLBACK* set_url)(struct _acf_response_t* self,
                              const acf_string_t* url);
} acf_response_t;

///
/// Create a new acf_response_t object.
///
ACF_EXPORT acf_response_t* acf_response_create(void);

#ifdef __cplusplus
}
#endif

#endif  // ACF_INCLUDE_CAPI_ACF_RESPONSE_CAPI_H_
