// Copyright (c) 2025 Admenri. All rights reserved.
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool and should not edited
// by hand. See the translator.README.txt file in the tools directory for
// more information.
//
// $hash=f8923747c87eddd27dadf331fe7b56b7ba95e323$
//

#ifndef ACF_INCLUDE_CAPI_ACF_ENVIRONMENT_CAPI_H_
#define ACF_INCLUDE_CAPI_ACF_ENVIRONMENT_CAPI_H_
#pragma once

#include "include/capi/acf_callback_capi.h"
#include "include/capi/acf_request_capi.h"
#include "include/capi/acf_resource_request_handler_capi.h"
#include "include/capi/acf_urlrequest_capi.h"
#include "include/internal/acf_defines.h"
#include "include/internal/acf_enums.h"
#include "include/internal/acf_scoped_refptr.h"
#include "include/internal/acf_string.h"
#include "include/internal/acf_string_list.h"
#include "include/internal/acf_string_multimap.h"
#include "include/internal/acf_types.h"
#include "include/internal/acf_types_wrappers.h"

#ifdef __cplusplus
extern "C" {
#endif

struct _acf_browser_handler_t;
struct _acf_browser_t;
struct _acf_complete_handler_t;
struct _acf_environment_handler_t;
struct _acf_environment_t;
struct _acf_profile_t;
struct _acf_request_t;
struct _acf_resource_request_handler_t;

///
/// ACF's environment event handler.
///
typedef struct _acf_environment_handler_t {
  ///
  /// Base structure.
  ///
  acf_base_ref_counted_t base;

  ///
  /// Called when the environment has been initialized. This event will be
  /// called on runner thread.
  ///
  void(ACF_CALLBACK* on_process_initialized)(
      struct _acf_environment_handler_t* self,
      struct _acf_environment_t* environment,
      int success);

  ///
  /// Browser process create a url loader. Request handler will intercept the
  /// network request on browser process. Raise that |frame_id| maybe nullptr
  /// when request is sent from service worker. |frame_id| can be matched with
  /// acf_frame_t::get_identifier().
  ///
  struct _acf_resource_request_handler_t*(
      ACF_CALLBACK* get_resource_request_handler)(
      struct _acf_environment_handler_t* self,
      struct _acf_profile_t* profile,
      int64 frame_id,
      struct _acf_request_t* request,
      acf_url_loader_factory_type_t type,
      const acf_string_t* request_initiator,
      int* block_request);

  ///
  /// Browser kernel send a browser navigate request, intercepting navigate
  /// request for custom process. Must enable browser settings
  /// |disable_default_navigate|.
  ///
  void(ACF_CALLBACK* on_process_navigate_request)(
      struct _acf_environment_handler_t* self,
      struct _acf_profile_t* profile,
      const acf_string_t* url,
      const acf_string_t* referrer,
      int user_gesture);
} acf_environment_handler_t;

///
/// ACF process environment control object.
///
typedef struct _acf_environment_t {
  ///
  /// Base structure.
  ///
  acf_base_ref_counted_t base;

  ///
  /// Adjust the same object to other.
  ///
  int(ACF_CALLBACK* is_same)(struct _acf_environment_t* self,
                             struct _acf_environment_t* that);

  ///
  /// Get if environment is now valid.
  ///
  int(ACF_CALLBACK* is_valid)(struct _acf_environment_t* self);

  ///
  /// Get chromium kernel version number: e.g.:49.0.2623.125
  ///
  // The resulting string must be freed by calling acf_string_userfree_free().
  acf_string_userfree_t(ACF_CALLBACK* get_kernel_version)(
      struct _acf_environment_t* self);

  ///
  /// Get default profile, path: "Default".
  ///
  struct _acf_profile_t*(ACF_CALLBACK* get_default_profile)(
      struct _acf_environment_t* self);

  ///
  /// Create a profile hosted a user profile each path could only create a
  /// profile. Called handler on runner thread.
  ///
  struct _acf_profile_t*(ACF_CALLBACK* create_profile)(
      struct _acf_environment_t* self,
      const struct _acf_profile_create_params_t* params,
      struct _acf_complete_handler_t* handler);

  ///
  /// Create browser from environment (async) return object immediately but the
  /// object was invalid.
  ///
  struct _acf_browser_t*(ACF_CALLBACK* create_browser)(
      struct _acf_environment_t* self,
      struct _acf_profile_t* profile,
      struct _acf_browser_handler_t* handler,
      const acf_browser_settings_t* settings,
      const struct _acf_browser_create_params_t* params,
      struct _acf_dictionary_value_t* extra_info);

  ///
  /// Create a new URL request that is not associated with a specific browser or
  /// frame. Use CefFrame::CreateURLRequest instead if you want the request to
  /// have this association, in which case it may be handled differently (see
  /// documentation on that function). A request created with this function may
  /// only originate from the browser process, and will behave as follows:
  ///   - POST data may only contain only a single element of type PDE_TYPE_FILE
  ///     or PDE_TYPE_BYTES.
  ///
  /// The |request| object will be marked as read-only after calling this
  /// function.
  ///
  struct _acf_urlrequest_t*(ACF_CALLBACK* create_urlrequest)(
      struct _acf_environment_t* self,
      struct _acf_request_t* request,
      uint32 flags,
      struct _acf_urlrequest_client_t* client,
      struct _acf_frame_t* frame,
      struct _acf_profile_t* profile);

  ///
  /// Set network service context profile infomation.
  ///
  void(ACF_CALLBACK* set_network_context_profile)(
      struct _acf_environment_t* self,
      struct _acf_value_t* tokens);
} acf_environment_t;

///
/// Create new environment on target user data dir. Avoid create multi
/// environment on the same data dir.
///
ACF_EXPORT acf_environment_t* acf_environment_create(
    const acf_string_t* browser_path,
    acf_string_multimap_t extra_command_line,
    const struct _acf_environment_settings_t* settings,
    acf_environment_handler_t* handler);

///
/// Get Ex functions activated state.
///
ACF_EXPORT int acf_get_ex_version_active_state(void);

#ifdef __cplusplus
}
#endif

#endif  // ACF_INCLUDE_CAPI_ACF_ENVIRONMENT_CAPI_H_
