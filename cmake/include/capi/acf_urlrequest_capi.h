// Copyright (c) 2025 Admenri. All rights reserved.
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool and should not edited
// by hand. See the translator.README.txt file in the tools directory for
// more information.
//
// $hash=27f5a5f1aaf1b3417cd9fdc545865fc2e3844431$
//

#ifndef ACF_INCLUDE_CAPI_ACF_URLREQUEST_CAPI_H_
#define ACF_INCLUDE_CAPI_ACF_URLREQUEST_CAPI_H_
#pragma once

#include "include/capi/acf_frame_capi.h"
#include "include/capi/acf_profile_capi.h"
#include "include/capi/acf_request_capi.h"
#include "include/capi/acf_response_capi.h"
#include "include/internal/acf_scoped_refptr.h"
#include "include/internal/acf_string.h"
#include "include/internal/acf_types_wrappers.h"

#ifdef __cplusplus
extern "C" {
#endif

struct _acf_environment_t;
struct _acf_urlrequest_client_t;

///
/// Structure used to make a URL request. URL requests are not associated with a
/// browser instance so no CefClient callbacks will be executed. URL requests
/// can be created on any valid ACF thread in either the browser or render
/// process. Once created the functions of the URL request object must be
/// accessed on the same thread that created it.
///
typedef struct _acf_urlrequest_t {
  ///
  /// Base structure.
  ///
  acf_base_ref_counted_t base;

  ///
  /// Returns the request object used to create this URL request. The returned
  /// object is read-only and should not be modified.
  ///
  struct _acf_request_t*(ACF_CALLBACK* get_request)(
      struct _acf_urlrequest_t* self);

  ///
  /// Returns the client.
  ///
  struct _acf_urlrequest_client_t*(ACF_CALLBACK* get_client)(
      struct _acf_urlrequest_t* self);

  ///
  /// Returns the hosted environment.
  ///
  struct _acf_environment_t*(ACF_CALLBACK* get_environment)(
      struct _acf_urlrequest_t* self);

  ///
  /// Returns the url request flags.
  ///
  uint32(ACF_CALLBACK* get_flags)(struct _acf_urlrequest_t* self);

  ///
  /// Returns the response, or NULL if no response information is available.
  /// Response information will only be available after the upload has
  /// completed. The returned object is read-only and should not be modified.
  ///
  struct _acf_response_t*(ACF_CALLBACK* get_response)(
      struct _acf_urlrequest_t* self);

  ///
  /// Cancel the request.
  ///
  void(ACF_CALLBACK* cancel)(struct _acf_urlrequest_t* self);
} acf_urlrequest_t;

///
/// Structure that should be implemented by the CefURLRequest client. The
/// functions of this structure will be called on the same thread that created
/// the request unless otherwise documented.
///
typedef struct _acf_urlrequest_client_t {
  ///
  /// Base structure.
  ///
  acf_base_ref_counted_t base;

  ///
  /// Notifies the client that the request has completed. Use the
  /// CefURLRequest::GetRequestStatus function to determine if the request was
  /// successful or not.
  ///
  void(ACF_CALLBACK* on_request_complete)(struct _acf_urlrequest_client_t* self,
                                          struct _acf_urlrequest_t* request,
                                          int success);

  ///
  /// Notifies the client of upload progress. |current| denotes the number of
  /// bytes sent so far and |total| is the total size of uploading data (or -1
  /// if chunked upload is enabled). This function will only be called if the
  /// UR_FLAG_REPORT_UPLOAD_PROGRESS flag is set on the request.
  ///
  void(ACF_CALLBACK* on_upload_progress)(struct _acf_urlrequest_client_t* self,
                                         struct _acf_urlrequest_t* request,
                                         int64 current,
                                         int64 total);

  ///
  /// Notifies the client of download progress. |current| denotes the number of
  /// bytes received up to the call and |total| is the expected total size of
  /// the response (or -1 if not determined).
  ///
  void(ACF_CALLBACK* on_download_progress)(
      struct _acf_urlrequest_client_t* self,
      struct _acf_urlrequest_t* request,
      int64 current,
      int64 total);

  ///
  /// Called when some part of the response is read. |data| contains the current
  /// bytes received since the last call. This function will not be called if
  /// the UR_FLAG_NO_DOWNLOAD_DATA flag is set on the request.
  ///
  void(ACF_CALLBACK* on_download_data)(struct _acf_urlrequest_client_t* self,
                                       struct _acf_urlrequest_t* request,
                                       const void* data,
                                       size_t data_length);
} acf_urlrequest_client_t;

#ifdef __cplusplus
}
#endif

#endif  // ACF_INCLUDE_CAPI_ACF_URLREQUEST_CAPI_H_
