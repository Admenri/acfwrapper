// Copyright (c) 2025 Admenri. All rights reserved.
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool and should not edited
// by hand. See the translator.README.txt file in the tools directory for
// more information.
//
// $hash=4e1e1fcfab132820d28bbb67320b9d4c9fc660c7$
//

#ifndef ACF_INCLUDE_CAPI_ACF_FRAME_CAPI_H_
#define ACF_INCLUDE_CAPI_ACF_FRAME_CAPI_H_
#pragma once

#include "include/capi/acf_browser_capi.h"
#include "include/capi/acf_callback_capi.h"
#include "include/capi/acf_profile_capi.h"
#include "include/capi/acf_values_capi.h"
#include "include/internal/acf_enums.h"
#include "include/internal/acf_scoped_refptr.h"
#include "include/internal/acf_string.h"
#include "include/internal/acf_string_list.h"
#include "include/internal/acf_types.h"
#include "include/internal/acf_types_wrappers.h"

#ifdef __cplusplus
extern "C" {
#endif

struct _acf_browser_t;
struct _acf_domdocument_t;
struct _acf_domnode_t;
struct _acf_string_visitor_t;
struct _acf_value_t;

///
/// Execute result handler
///
typedef struct _acf_execute_javascript_callback_t {
  ///
  /// Base structure.
  ///
  acf_base_ref_counted_t base;

  ///
  /// Get execute return value
  ///
  void(ACF_CALLBACK* on_execute_result)(
      struct _acf_execute_javascript_callback_t* self,
      struct _acf_value_t* value);
} acf_execute_javascript_callback_t;

///
/// DOM result handler
///
typedef struct _acf_domdocument_callback_t {
  ///
  /// Base structure.
  ///
  acf_base_ref_counted_t base;

  ///
  /// DOM snapshot
  ///
  void(ACF_CALLBACK* on_domresult)(struct _acf_domdocument_callback_t* self,
                                   struct _acf_domdocument_t* value);
} acf_domdocument_callback_t;

///
/// Node result handler
///
typedef struct _acf_domnode_callback_t {
  ///
  /// Base structure.
  ///
  acf_base_ref_counted_t base;

  ///
  /// DOM query result, return false (0) to stop.
  ///
  int(ACF_CALLBACK* on_query_result)(struct _acf_domnode_callback_t* self,
                                     struct _acf_domnode_t* value,
                                     int count,
                                     int total);
} acf_domnode_callback_t;

///
/// ACF's frame object host.
///
typedef struct _acf_frame_t {
  ///
  /// Base structure.
  ///
  acf_base_ref_counted_t base;

  ///
  /// Get frame object valid state.
  ///
  int(ACF_CALLBACK* is_valid)(struct _acf_frame_t* self);

  ///
  /// Compare object with other object.
  ///
  int(ACF_CALLBACK* is_same)(struct _acf_frame_t* self,
                             struct _acf_frame_t* object);

  ///
  /// Returns the parent of this frame or NULL if this is the main (top-level)
  /// frame.
  ///
  struct _acf_frame_t*(ACF_CALLBACK* get_parent)(struct _acf_frame_t* self);

  ///
  /// Returns the browser that this frame belongs to.
  ///
  struct _acf_browser_t*(ACF_CALLBACK* get_browser)(struct _acf_frame_t* self);

  ///
  /// Returns the URL currently loaded in this frame.
  ///
  // The resulting string must be freed by calling acf_string_userfree_free().
  acf_string_userfree_t(ACF_CALLBACK* get_url)(struct _acf_frame_t* self);

  ///
  /// Returns the name for this frame. If the frame has an assigned name (for
  /// example, set via the iframe "name" attribute) then that value will be
  /// returned. Otherwise a unique name will be constructed based on the frame
  /// parent hierarchy. The main (top-level) frame will always have an NULL name
  /// value.
  ///
  // The resulting string must be freed by calling acf_string_userfree_free().
  acf_string_userfree_t(ACF_CALLBACK* get_name)(struct _acf_frame_t* self);

  ///
  /// Returns the globally unique identifier for this frame or < 0 if the
  /// underlying frame does not yet exist.
  ///
  int64(ACF_CALLBACK* get_identifier)(struct _acf_frame_t* self);

  ///
  /// Is frame main context in browser.
  ///
  int(ACF_CALLBACK* is_main)(struct _acf_frame_t* self);

  ///
  /// Execute javascripts in current frame context. value is invalid when return
  ///
  void(ACF_CALLBACK* execute_javascript)(
      struct _acf_frame_t* self,
      const acf_string_t* script,
      const acf_string_t* url,
      struct _acf_execute_javascript_callback_t* handler);

  ///
  /// Retrieve this frame's HTML source as a string sent to the specified
  /// visitor.
  ///
  void(ACF_CALLBACK* get_source)(struct _acf_frame_t* self,
                                 struct _acf_string_visitor_t* visitor);

  ///
  /// Get the snapshot of the current DOM.
  ///
  void(ACF_CALLBACK* get_domdocument)(
      struct _acf_frame_t* self,
      struct _acf_domdocument_callback_t* visitor);

  ///
  /// Get selector snapshot of the current DOM.
  ///
  void(ACF_CALLBACK* query_selector_all)(
      struct _acf_frame_t* self,
      const acf_string_t* selector,
      struct _acf_domnode_callback_t* visitor);
} acf_frame_t;

#ifdef __cplusplus
}
#endif

#endif  // ACF_INCLUDE_CAPI_ACF_FRAME_CAPI_H_
