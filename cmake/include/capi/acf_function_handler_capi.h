// Copyright (c) 2025 Admenri. All rights reserved.
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool and should not edited
// by hand. See the translator.README.txt file in the tools directory for
// more information.
//
// $hash=142a33f0b1c34ee26a6d4e07832738888830c600$
//

#ifndef ACF_INCLUDE_CAPI_ACF_FUNCTION_HANDLER_CAPI_H_
#define ACF_INCLUDE_CAPI_ACF_FUNCTION_HANDLER_CAPI_H_
#pragma once

#include "include/capi/acf_browser_capi.h"
#include "include/capi/acf_frame_capi.h"
#include "include/capi/acf_values_capi.h"
#include "include/internal/acf_scoped_refptr.h"
#include "include/internal/acf_types.h"

#ifdef __cplusplus
extern "C" {
#endif

struct _acf_frame_t;
struct _acf_value_t;

///
/// Promise return resolver
///
typedef struct _acf_promise_resolver_t {
  ///
  /// Base structure.
  ///
  acf_base_ref_counted_t base;

  ///
  /// Reply message to promise.
  ///
  void(ACF_CALLBACK* resolve)(struct _acf_promise_resolver_t* self,
                              struct _acf_value_t* return_value);
} acf_promise_resolver_t;

///
/// Function register factory handler
///
typedef struct _acf_function_handler_t {
  ///
  /// Base structure.
  ///
  acf_base_ref_counted_t base;

  ///
  /// Function execution register
  ///
  void(ACF_CALLBACK* on_execute_function)(
      struct _acf_function_handler_t* self,
      size_t argumentsCount,
      struct _acf_value_t* const* arguments,
      struct _acf_promise_resolver_t* promise);
} acf_function_handler_t;

///
/// Function register factory
///
typedef struct _acf_function_factory_t {
  ///
  /// Base structure.
  ///
  acf_base_ref_counted_t base;

  ///
  /// Create web message host handler for user-side
  ///
  struct _acf_function_handler_t*(ACF_CALLBACK* create_host)(
      struct _acf_function_factory_t* self,
      struct _acf_browser_t* browser,
      const acf_string_t* origin,
      struct _acf_frame_t* frame);
} acf_function_factory_t;

#ifdef __cplusplus
}
#endif

#endif  // ACF_INCLUDE_CAPI_ACF_FUNCTION_HANDLER_CAPI_H_
