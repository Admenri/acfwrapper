// Copyright (c) 2025 Admenri. All rights reserved.
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool and should not edited
// by hand. See the translator.README.txt file in the tools directory for
// more information.
//
// $hash=c0ad8582a9f8205538c0bfe60b771db736757b4c$
//

#ifndef ACF_INCLUDE_CAPI_ACF_WEBSOCKET_CAPI_H_
#define ACF_INCLUDE_CAPI_ACF_WEBSOCKET_CAPI_H_
#pragma once

#include "include/capi/acf_values_capi.h"
#include "include/internal/acf_scoped_refptr.h"
#include "include/internal/acf_string_list.h"
#include "include/internal/acf_types.h"

#ifdef __cplusplus
extern "C" {
#endif

struct _acf_value_t;
struct _acf_web_socket_client_t;

///
/// Websocket client handler
///
typedef struct _acf_web_socket_client_handler_t {
  ///
  /// Base structure.
  ///
  acf_base_ref_counted_t base;

  ///
  /// Received handshake response from network service. Client provide the
  /// client from this event.
  ///
  void(ACF_CALLBACK* on_handshake_response)(
      struct _acf_web_socket_client_handler_t* self,
      struct _acf_web_socket_client_t* client);

  ///
  /// Handshake connection failed.
  ///
  void(ACF_CALLBACK* on_failure)(struct _acf_web_socket_client_handler_t* self,
                                 const acf_string_t* message,
                                 int net_err,
                                 int response_code);

  ///
  /// Received message from spec side in websocket connection. Return true (1)
  /// for intercept message sending to another side. message can be modified
  /// during this event.
  ///
  int(ACF_CALLBACK* on_received_message_from)(
      struct _acf_web_socket_client_handler_t* self,
      acf_websocket_message_routing_t direction,
      struct _acf_value_t* message);

  ///
  /// Before connection closing, user can decide keeping socket. Return true (1)
  /// for keep single-side connection for websocket.
  ///
  void(ACF_CALLBACK* on_connection_closing)(
      struct _acf_web_socket_client_handler_t* self);
} acf_web_socket_client_handler_t;

///
/// Websocket client used in host process
///
typedef struct _acf_web_socket_client_t {
  ///
  /// Base structure.
  ///
  acf_base_ref_counted_t base;

  ///
  /// Get object valid state.
  ///
  int(ACF_CALLBACK* is_valid)(struct _acf_web_socket_client_t* self);

  ///
  /// Get storage handler.
  ///
  struct _acf_web_socket_client_handler_t*(ACF_CALLBACK* get_handler)(
      struct _acf_web_socket_client_t* self);

  ///
  /// Send message to spec side in websocket connection. |message| is the
  /// acf_value_t that only received String type or AcfBinary Type.
  ///
  void(ACF_CALLBACK* send_message_to)(struct _acf_web_socket_client_t* self,
                                      acf_websocket_message_routing_t direction,
                                      struct _acf_value_t* message);

  ///
  /// Send handshake closing request to spec direction. If all side are closed,
  /// it will force destroy connection.
  ///
  void(ACF_CALLBACK* send_close_connection_request)(
      struct _acf_web_socket_client_t* self,
      acf_websocket_message_routing_t direction);
} acf_web_socket_client_t;

#ifdef __cplusplus
}
#endif

#endif  // ACF_INCLUDE_CAPI_ACF_WEBSOCKET_CAPI_H_
