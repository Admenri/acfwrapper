// Copyright (c) 2025 Admenri. All rights reserved.
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool and should not edited
// by hand. See the translator.README.txt file in the tools directory for
// more information.
//
// $hash=a8476910589bdd02a45238fdad3c9538154ddbd5$
//

#ifndef ACF_INCLUDE_CAPI_ACF_DOM_CAPI_H_
#define ACF_INCLUDE_CAPI_ACF_DOM_CAPI_H_
#pragma once

#include "include/capi/acf_base_capi.h"
#include "include/internal/acf_scoped_refptr.h"
#include "include/internal/acf_string.h"
#include "include/internal/acf_string_map.h"
#include "include/internal/acf_types.h"
#include "include/internal/acf_types_wrappers.h"

#ifdef __cplusplus
extern "C" {
#endif

struct _acf_domdocument_t;
struct _acf_domnode_t;

///
/// Structure used to represent a DOM document. The functions of this structure
/// should only be called on the render process main thread thread.
///
typedef struct _acf_domdocument_t {
  ///
  /// Base structure.
  ///
  acf_base_ref_counted_t base;

  ///
  /// Returns the document type.
  ///
  acf_dom_document_type_t(ACF_CALLBACK* get_type)(
      struct _acf_domdocument_t* self);

  ///
  /// Returns the root document node.
  ///
  struct _acf_domnode_t*(ACF_CALLBACK* get_document)(
      struct _acf_domdocument_t* self);

  ///
  /// Returns the title of an HTML document.
  ///
  // The resulting string must be freed by calling acf_string_userfree_free().
  acf_string_userfree_t(ACF_CALLBACK* get_title)(
      struct _acf_domdocument_t* self);

  ///
  /// Returns the base URL for the document.
  ///
  // The resulting string must be freed by calling acf_string_userfree_free().
  acf_string_userfree_t(ACF_CALLBACK* get_base_url)(
      struct _acf_domdocument_t* self);
} acf_domdocument_t;

///
/// Structure used to represent a DOM node. The functions of this structure
/// should only be called on the render process main thread.
///
typedef struct _acf_domnode_t {
  ///
  /// Base structure.
  ///
  acf_base_ref_counted_t base;

  ///
  /// Returns the type for this node.
  ///
  acf_dom_node_type_t(ACF_CALLBACK* get_type)(struct _acf_domnode_t* self);

  ///
  /// Returns the name of this node.
  ///
  // The resulting string must be freed by calling acf_string_userfree_free().
  acf_string_userfree_t(ACF_CALLBACK* get_name)(struct _acf_domnode_t* self);

  ///
  /// Returns the value of this node.
  ///
  // The resulting string must be freed by calling acf_string_userfree_free().
  acf_string_userfree_t(ACF_CALLBACK* get_value)(struct _acf_domnode_t* self);

  ///
  /// Returns the contents of this node as markup.
  ///
  // The resulting string must be freed by calling acf_string_userfree_free().
  acf_string_userfree_t(ACF_CALLBACK* get_as_markup)(
      struct _acf_domnode_t* self);

  ///
  /// Return the child node count.
  ///
  int(ACF_CALLBACK* get_child_node_count)(struct _acf_domnode_t* self);

  ///
  /// Get child node.
  ///
  struct _acf_domnode_t*(
      ACF_CALLBACK* get_child_node)(struct _acf_domnode_t* self, int index);

  ///
  /// Returns the tag name of this element.
  ///
  // The resulting string must be freed by calling acf_string_userfree_free().
  acf_string_userfree_t(ACF_CALLBACK* get_element_tag_name)(
      struct _acf_domnode_t* self);

  ///
  /// Returns true (1) if this element has attributes.
  ///
  int(ACF_CALLBACK* has_element_attributes)(struct _acf_domnode_t* self);

  ///
  /// Returns true (1) if this element has an attribute named |attrName|.
  ///
  int(ACF_CALLBACK* has_element_attribute)(struct _acf_domnode_t* self,
                                           const acf_string_t* attrName);

  ///
  /// Returns the element attribute named |attrName|.
  ///
  // The resulting string must be freed by calling acf_string_userfree_free().
  acf_string_userfree_t(ACF_CALLBACK* get_element_attribute)(
      struct _acf_domnode_t* self,
      const acf_string_t* attrName);

  ///
  /// Returns a map of all element attributes.
  ///
  void(ACF_CALLBACK* get_element_attributes)(struct _acf_domnode_t* self,
                                             acf_string_map_t attrMap);

  ///
  /// Returns the inner text of the element.
  ///
  // The resulting string must be freed by calling acf_string_userfree_free().
  acf_string_userfree_t(ACF_CALLBACK* get_element_inner_text)(
      struct _acf_domnode_t* self);

  ///
  /// Returns the bounds of the element in device pixels. Use
  /// "window.devicePixelRatio" to convert to/from CSS pixels.
  ///
  acf_rect_t(ACF_CALLBACK* get_element_bounds)(struct _acf_domnode_t* self);
} acf_domnode_t;

#ifdef __cplusplus
}
#endif

#endif  // ACF_INCLUDE_CAPI_ACF_DOM_CAPI_H_
