// Copyright (c) 2023-2024 Admenri.
// All rights reserved.

#ifndef ACF_INCLUDE_INTERNAL_ACF_TYPES_H_
#define ACF_INCLUDE_INTERNAL_ACF_TYPES_H_

#include <wtypes.h>
#include "include/internal/acf_enums.h"
#include "include/internal/acf_string.h"

#ifdef __cplusplus
extern "C" {
#endif

// 32-bit ARGB color value, not premultiplied. The color components are always
// in a known order. Equivalent to the SkColor type.
typedef uint32_t acf_color_t;

///
/// Structure representing a range.
///
typedef struct _acf_range_t {
  uint32_t from;
  uint32_t to;
} acf_range_t;

///
// Structure representing a point.
///
typedef struct _acf_point_t {
  int x;
  int y;
} acf_point_t;

///
// Structure representing a rectangle.
///
typedef struct _acf_rect_t {
  int x;
  int y;
  int width;
  int height;
} acf_rect_t;

///
// Structure representing a size.
///
typedef struct _acf_size_t {
  int width;
  int height;
} acf_size_t;

///
/// Structure browser dynamic settings.
///
typedef struct _acf_browser_settings_t {
  ///
  /// Browser file drag-in controller (0/1)
  ///
  int disable_drag_file;

  ///
  /// Browser window default accelerator controller (0/1)
  ///
  int disable_accelerator;

  ///
  /// Disable browser status bubble display (0/1)
  ///
  int disable_status_bubble;

  ///
  /// Use custom javascript dialogs. (0/1)
  ///
  int disable_default_javascript_dialogs;

  ///
  /// Disable default HTTP auth dialog. (0/1)
  ///
  int disable_default_login_delegate;

  ///
  /// When set activitable to false, browser will never get focus. (0/1)
  ///
  int disable_activate;

  ///
  /// Disable default permission dialog bubble. (0/1)
  ///
  int disable_default_permission_prompt;
} acf_browser_settings_t;

///
/// Environment create params.
///
typedef struct _acf_environment_settings_t {
  ///
  /// Size of this structure.
  ///
  size_t size;

  ///
  /// The chromium's cache & userdata dir.
  ///
  acf_string_t user_data_dir;
} acf_environment_settings_t;

///
/// Structure profile parameter
///
typedef struct _acf_profile_create_params_t {
  ///
  /// Profile storage path (compare to user data dir).
  ///
  acf_string_t storage_path;

  ///
  /// Enable profile incognito mode, based on storage path.
  ///
  int incognito_mode;

  ///
  /// Whether restore old session when start.
  ///
  int restore_old_session_cookies;

  ///
  /// Persist the session cookies in browsing.
  ///
  int persist_session_cookies;

  ///
  /// Enable local cookies storage encrypt value.
  ///
  int enable_encrypted_cookies;
} acf_profile_create_params_t;

///
/// Popup window features.
///
typedef struct _acf_popup_features_t {
  int x;
  int xSet;
  int y;
  int ySet;
  int width;
  int widthSet;
  int height;
  int heightSet;
  int isPartitionedPopin;
  int isPopup;
} acf_popup_features_t;

///
/// Browser create params
///
typedef struct _acf_browser_create_params_t {
  ///
  /// Size of this structure.
  ///
  size_t size;

  ///
  /// Parent window, if nullptr the browser will show with popup.
  ///
  AcfWindowHandle parent;

  ///
  /// initial window visible
  ///
  int visible;

  ///
  /// pos & size in parent
  ///
  acf_rect_t rect;
} acf_browser_create_params_t;

///
/// Structure representing mouse event information.
///
typedef struct _acf_mouse_event_t {
  ///
  /// X coordinate relative to the left side of the view.
  ///
  int x;

  ///
  /// Y coordinate relative to the top side of the view.
  ///
  int y;

  ///
  /// Bit flags describing any pressed modifier keys. See
  /// acf_event_flags_t for values.
  ///
  uint32 modifiers;
} acf_mouse_event_t;

///
/// Structure representing keyboard event information.
///
typedef struct _acf_key_event_t {
  ///
  /// The type of keyboard event.
  ///
  acf_key_event_type_t type;

  ///
  /// Bit flags describing any pressed modifier keys. See
  /// acf_event_flags_t for values.
  ///
  uint32 modifiers;

  ///
  /// The Windows key code for the key event. This value is used by the DOM
  /// specification. Sometimes it comes directly from the event (i.e. on
  /// Windows) and sometimes it's determined using a mapping function. See
  /// WebCore/platform/chromium/KeyboardCodes.h for the list of values.
  ///
  int windows_key_code;

  ///
  /// The actual key code genenerated by the platform.
  ///
  int native_key_code;

  ///
  /// Indicates whether the event is considered a "system key" event (see
  /// http://msdn.microsoft.com/en-us/library/ms646286(VS.85).aspx for details).
  /// This value will always be false on non-Windows platforms.
  ///
  int is_system_key;

  ///
  /// The character generated by the keystroke.
  ///
  char16 character;

  ///
  /// Same as |character| but unmodified by any concurrently-held modifiers
  /// (except shift). This is useful for working out shortcut keys.
  ///
  char16 unmodified_character;

  ///
  /// True if the focus is currently on an editable field on the page. This is
  /// useful for determining if standard key events should be intercepted.
  ///
  int focus_on_editable_field;
} acf_key_event_t;

///
/// Structure representing IME composition underline information. This is a thin
/// wrapper around Blink's WebCompositionUnderline class and should be kept in
/// sync with that.
///
typedef struct _acf_composition_underline_t {
  ///
  /// Underline character range.
  ///
  acf_range_t range;

  ///
  /// Text color.
  ///
  acf_color_t color;

  ///
  /// Background color.
  ///
  acf_color_t background_color;

  ///
  /// Set to true (1) for thick underline.
  ///
  int thick;

  ///
  /// Style.
  ///
  acf_composition_underline_style_t style;
} acf_composition_underline_t;

#ifdef __cplusplus
}
#endif

#endif  //! ACF_INCLUDE_INTERNAL_ACF_TYPES_H_
