// Copyright (c) 2025 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=5595df4334e7f7e6af07624aadb7fce34d7850f8$
//

#include "libacf_dll/cpptoc/string_visitor_cpptoc.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

void ACF_CALLBACK string_visitor_visit(struct _acf_string_visitor_t* self,
                                       const acf_string_t* string) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return;
  }
  // Unverified params: string

  // Execute
  AcfStringVisitorCppToC::Get(self)->Visit(AcfString(string));
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

AcfStringVisitorCppToC::AcfStringVisitorCppToC() {
  GetStruct()->visit = string_visitor_visit;
}

// DESTRUCTOR - Do not edit by hand.

AcfStringVisitorCppToC::~AcfStringVisitorCppToC() {}

template <>
AcfRefPtr<AcfStringVisitor> AcfCppToCRefCounted<
    AcfStringVisitorCppToC,
    AcfStringVisitor,
    acf_string_visitor_t>::UnwrapDerived(AcfWrapperType type,
                                         acf_string_visitor_t* s) {
  return nullptr;
}

template <>
AcfWrapperType AcfCppToCRefCounted<AcfStringVisitorCppToC,
                                   AcfStringVisitor,
                                   acf_string_visitor_t>::kWrapperType =
    WT_STRING_VISITOR;
