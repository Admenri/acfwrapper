// Copyright (c) 2025 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=be82f3368425ebcceac2844a793b154391567c16$
//

#include "libacf_dll/cpptoc/urlrequest_client_cpptoc.h"

#include "libacf_dll/ctocpp/urlrequest_ctocpp.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

void ACF_CALLBACK
urlrequest_client_on_request_complete(struct _acf_urlrequest_client_t* self,
                                      acf_urlrequest_t* request,
                                      int success) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return;
  }
  // Verify param: request; type: refptr_diff
  if (!request) {
    return;
  }

  // Execute
  AcfURLRequestClientCppToC::Get(self)->OnRequestComplete(
      AcfURLRequestCToCpp::Wrap(request), success ? true : false);
}

void ACF_CALLBACK
urlrequest_client_on_upload_progress(struct _acf_urlrequest_client_t* self,
                                     acf_urlrequest_t* request,
                                     int64 current,
                                     int64 total) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return;
  }
  // Verify param: request; type: refptr_diff
  if (!request) {
    return;
  }

  // Execute
  AcfURLRequestClientCppToC::Get(self)->OnUploadProgress(
      AcfURLRequestCToCpp::Wrap(request), current, total);
}

void ACF_CALLBACK
urlrequest_client_on_download_progress(struct _acf_urlrequest_client_t* self,
                                       acf_urlrequest_t* request,
                                       int64 current,
                                       int64 total) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return;
  }
  // Verify param: request; type: refptr_diff
  if (!request) {
    return;
  }

  // Execute
  AcfURLRequestClientCppToC::Get(self)->OnDownloadProgress(
      AcfURLRequestCToCpp::Wrap(request), current, total);
}

void ACF_CALLBACK
urlrequest_client_on_download_data(struct _acf_urlrequest_client_t* self,
                                   acf_urlrequest_t* request,
                                   const void* data,
                                   size_t data_length) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return;
  }
  // Verify param: request; type: refptr_diff
  if (!request) {
    return;
  }
  // Verify param: data; type: simple_byaddr
  if (!data) {
    return;
  }

  // Execute
  AcfURLRequestClientCppToC::Get(self)->OnDownloadData(
      AcfURLRequestCToCpp::Wrap(request), data, data_length);
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

AcfURLRequestClientCppToC::AcfURLRequestClientCppToC() {
  GetStruct()->on_request_complete = urlrequest_client_on_request_complete;
  GetStruct()->on_upload_progress = urlrequest_client_on_upload_progress;
  GetStruct()->on_download_progress = urlrequest_client_on_download_progress;
  GetStruct()->on_download_data = urlrequest_client_on_download_data;
}

// DESTRUCTOR - Do not edit by hand.

AcfURLRequestClientCppToC::~AcfURLRequestClientCppToC() {}

template <>
AcfRefPtr<AcfURLRequestClient> AcfCppToCRefCounted<
    AcfURLRequestClientCppToC,
    AcfURLRequestClient,
    acf_urlrequest_client_t>::UnwrapDerived(AcfWrapperType type,
                                            acf_urlrequest_client_t* s) {
  return nullptr;
}

template <>
AcfWrapperType AcfCppToCRefCounted<AcfURLRequestClientCppToC,
                                   AcfURLRequestClient,
                                   acf_urlrequest_client_t>::kWrapperType =
    WT_URLREQUEST_CLIENT;
