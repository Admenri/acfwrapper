// Copyright (c) 2025 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=3cf9afeb0d5a5ec70792085a46d66a6defc75100$
//

#include "libacf_dll/cpptoc/browser_handler_cpptoc.h"

#include "libacf_dll/cpptoc/web_socket_client_handler_cpptoc.h"
#include "libacf_dll/ctocpp/browser_ctocpp.h"
#include "libacf_dll/ctocpp/callback_ctocpp.h"
#include "libacf_dll/ctocpp/context_menu_callback_ctocpp.h"
#include "libacf_dll/ctocpp/context_menu_model_ctocpp.h"
#include "libacf_dll/ctocpp/context_menu_params_ctocpp.h"
#include "libacf_dll/ctocpp/file_dialog_callback_ctocpp.h"
#include "libacf_dll/ctocpp/frame_ctocpp.h"
#include "libacf_dll/ctocpp/java_script_dialog_callback_ctocpp.h"
#include "libacf_dll/ctocpp/login_delegate_ctocpp.h"
#include "libacf_dll/ctocpp/new_window_delegate_ctocpp.h"
#include "libacf_dll/ctocpp/permission_prompt_callback_ctocpp.h"
#include "libacf_dll/transfer_util.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

void ACF_CALLBACK
browser_handler_on_browser_created(struct _acf_browser_handler_t* self,
                                   struct _acf_browser_t* browser) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  if (!browser) {
    return;
  }

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnBrowserCreated(
      AcfBrowserCToCpp::Wrap(browser));
}

void ACF_CALLBACK browser_handler_on_new_window_request(
    struct _acf_browser_handler_t* self,
    struct _acf_browser_t* browser,
    acf_new_window_source_t source,
    acf_new_window_disposition_t disposition,
    const acf_popup_features_t* popup_features,
    int user_gesture,
    acf_new_window_delegate_t* delegate) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  if (!browser) {
    return;
  }
  // Verify param: popup_features; type: simple_byref_const
  if (!popup_features) {
    return;
  }
  // Verify param: delegate; type: refptr_diff
  if (!delegate) {
    return;
  }

  // Translate param: popup_features; type: simple_byref_const
  AcfPopupFeatures popup_featuresVal =
      popup_features ? *popup_features : AcfPopupFeatures();

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnNewWindowRequest(
      AcfBrowserCToCpp::Wrap(browser), source, disposition, popup_featuresVal,
      user_gesture ? true : false, AcfNewWindowDelegateCToCpp::Wrap(delegate));
}

void ACF_CALLBACK
browser_handler_on_browser_destroyed(struct _acf_browser_handler_t* self,
                                     struct _acf_browser_t* browser) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  if (!browser) {
    return;
  }

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnBrowserDestroyed(
      AcfBrowserCToCpp::Wrap(browser));
}

void ACF_CALLBACK
browser_handler_on_loading_state_changed(struct _acf_browser_handler_t* self,
                                         struct _acf_browser_t* browser,
                                         int show_loading_ui) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  if (!browser) {
    return;
  }

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnLoadingStateChanged(
      AcfBrowserCToCpp::Wrap(browser), show_loading_ui ? true : false);
}

void ACF_CALLBACK
browser_handler_on_navigation_state_changed(struct _acf_browser_handler_t* self,
                                            struct _acf_browser_t* browser,
                                            acf_navigation_types_t flags) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  if (!browser) {
    return;
  }

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnNavigationStateChanged(
      AcfBrowserCToCpp::Wrap(browser), flags);
}

void ACF_CALLBACK
browser_handler_on_activate_contents(struct _acf_browser_handler_t* self,
                                     struct _acf_browser_t* browser) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  if (!browser) {
    return;
  }

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnActivateContents(
      AcfBrowserCToCpp::Wrap(browser));
}

void ACF_CALLBACK
browser_handler_on_fullscreen_state_changed(struct _acf_browser_handler_t* self,
                                            struct _acf_browser_t* browser,
                                            int fullscreen) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  if (!browser) {
    return;
  }

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnFullscreenStateChanged(
      AcfBrowserCToCpp::Wrap(browser), fullscreen ? true : false);
}

void ACF_CALLBACK browser_handler_on_context_menu_request(
    struct _acf_browser_handler_t* self,
    struct _acf_browser_t* browser,
    struct _acf_context_menu_params_t* menu_params,
    struct _acf_context_menu_model_t* menu_model,
    acf_context_menu_callback_t* callback) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  if (!browser) {
    return;
  }
  // Verify param: menu_params; type: refptr_diff
  if (!menu_params) {
    return;
  }
  // Verify param: menu_model; type: refptr_diff
  if (!menu_model) {
    return;
  }
  // Verify param: callback; type: refptr_diff
  if (!callback) {
    return;
  }

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnContextMenuRequest(
      AcfBrowserCToCpp::Wrap(browser),
      AcfContextMenuParamsCToCpp::Wrap(menu_params),
      AcfContextMenuModelCToCpp::Wrap(menu_model),
      AcfContextMenuCallbackCToCpp::Wrap(callback));
}

void ACF_CALLBACK browser_handler_on_context_menu_execute(
    struct _acf_browser_handler_t* self,
    struct _acf_browser_t* browser,
    struct _acf_context_menu_params_t* menu_params,
    int command_id,
    int event_flags) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  if (!browser) {
    return;
  }
  // Verify param: menu_params; type: refptr_diff
  if (!menu_params) {
    return;
  }

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnContextMenuExecute(
      AcfBrowserCToCpp::Wrap(browser),
      AcfContextMenuParamsCToCpp::Wrap(menu_params), command_id, event_flags);
}

void ACF_CALLBACK
browser_handler_on_file_dialog(struct _acf_browser_handler_t* self,
                               struct _acf_browser_t* browser,
                               acf_file_dialog_mode_t mode,
                               const acf_string_t* title,
                               const acf_string_t* default_file_path,
                               acf_string_list_t accept_filters,
                               acf_file_dialog_callback_t* callback) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  if (!browser) {
    return;
  }
  // Verify param: callback; type: refptr_diff
  if (!callback) {
    return;
  }
  // Unverified params: title, default_file_path, accept_filters

  // Translate param: accept_filters; type: string_vec_byref_const
  std::vector<AcfString> accept_filtersList;
  transfer_string_list_contents(accept_filters, accept_filtersList);

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnFileDialog(
      AcfBrowserCToCpp::Wrap(browser), mode, AcfString(title),
      AcfString(default_file_path), accept_filtersList,
      AcfFileDialogCallbackCToCpp::Wrap(callback));
}

void ACF_CALLBACK browser_handler_on_java_script_dialog(
    struct _acf_browser_handler_t* self,
    struct _acf_browser_t* browser,
    struct _acf_frame_t* frame,
    acf_jsdialog_type_t dialog_type,
    const acf_string_t* message_text,
    const acf_string_t* default_prompt_text,
    acf_java_script_dialog_callback_t* callback) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  if (!browser) {
    return;
  }
  // Verify param: callback; type: refptr_diff
  if (!callback) {
    return;
  }
  // Unverified params: frame, message_text, default_prompt_text

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnJavaScriptDialog(
      AcfBrowserCToCpp::Wrap(browser), AcfFrameCToCpp::Wrap(frame), dialog_type,
      AcfString(message_text), AcfString(default_prompt_text),
      AcfJavaScriptDialogCallbackCToCpp::Wrap(callback));
}

void ACF_CALLBACK browser_handler_on_before_unload_dialog(
    struct _acf_browser_handler_t* self,
    struct _acf_browser_t* browser,
    struct _acf_frame_t* frame,
    int is_reload,
    acf_java_script_dialog_callback_t* callback) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  if (!browser) {
    return;
  }
  // Verify param: callback; type: refptr_diff
  if (!callback) {
    return;
  }
  // Unverified params: frame

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnBeforeUnloadDialog(
      AcfBrowserCToCpp::Wrap(browser), AcfFrameCToCpp::Wrap(frame),
      is_reload ? true : false,
      AcfJavaScriptDialogCallbackCToCpp::Wrap(callback));
}

void ACF_CALLBACK browser_handler_on_handle_java_script_dialog(
    struct _acf_browser_handler_t* self,
    struct _acf_browser_t* browser,
    int accept,
    const acf_string_t* prompt_override) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  if (!browser) {
    return;
  }
  // Unverified params: prompt_override

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnHandleJavaScriptDialog(
      AcfBrowserCToCpp::Wrap(browser), accept ? true : false,
      AcfString(prompt_override));
}

void ACF_CALLBACK browser_handler_on_cancel_java_script_dialogs(
    struct _acf_browser_handler_t* self,
    struct _acf_browser_t* browser,
    int reset_state) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  if (!browser) {
    return;
  }

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnCancelJavaScriptDialogs(
      AcfBrowserCToCpp::Wrap(browser), reset_state ? true : false);
}

void ACF_CALLBACK
browser_handler_on_auth_login_request(struct _acf_browser_handler_t* self,
                                      struct _acf_browser_t* browser,
                                      int is_proxy,
                                      const acf_string_t* host,
                                      const acf_string_t* url,
                                      const acf_string_t* scheme,
                                      const acf_string_t* realm,
                                      const acf_string_t* challenge,
                                      int is_main_frame,
                                      acf_login_delegate_t* delegate) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  if (!browser) {
    return;
  }
  // Verify param: delegate; type: refptr_diff
  if (!delegate) {
    return;
  }
  // Unverified params: host, url, scheme, realm, challenge

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnAuthLoginRequest(
      AcfBrowserCToCpp::Wrap(browser), is_proxy ? true : false, AcfString(host),
      AcfString(url), AcfString(scheme), AcfString(realm), AcfString(challenge),
      is_main_frame ? true : false, AcfLoginDelegateCToCpp::Wrap(delegate));
}

void ACF_CALLBACK browser_handler_on_show_permission_prompt(
    struct _acf_browser_handler_t* self,
    struct _acf_browser_t* browser,
    uint64 prompt_id,
    const acf_string_t* requesting_origin,
    uint32 requested_permissions,
    acf_permission_prompt_callback_t* callback) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  if (!browser) {
    return;
  }
  // Verify param: callback; type: refptr_diff
  if (!callback) {
    return;
  }
  // Unverified params: requesting_origin

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnShowPermissionPrompt(
      AcfBrowserCToCpp::Wrap(browser), prompt_id, AcfString(requesting_origin),
      requested_permissions, AcfPermissionPromptCallbackCToCpp::Wrap(callback));
}

void ACF_CALLBACK browser_handler_on_dismiss_permission_prompt(
    struct _acf_browser_handler_t* self,
    struct _acf_browser_t* browser,
    uint64 prompt_id,
    acf_permission_request_result_t result) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  if (!browser) {
    return;
  }

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnDismissPermissionPrompt(
      AcfBrowserCToCpp::Wrap(browser), prompt_id, result);
}

void ACF_CALLBACK
browser_handler_on_before_navigation(struct _acf_browser_handler_t* self,
                                     struct _acf_browser_t* browser,
                                     struct _acf_frame_t* frame,
                                     const acf_string_t* url,
                                     const acf_string_t* referrer,
                                     int user_gesture,
                                     int is_redirect,
                                     struct _acf_callback_t* callback) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  if (!browser) {
    return;
  }
  // Verify param: callback; type: refptr_diff
  if (!callback) {
    return;
  }
  // Unverified params: frame, url, referrer

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnBeforeNavigation(
      AcfBrowserCToCpp::Wrap(browser), AcfFrameCToCpp::Wrap(frame),
      AcfString(url), AcfString(referrer), user_gesture ? true : false,
      is_redirect ? true : false, AcfCallbackCToCpp::Wrap(callback));
}

void ACF_CALLBACK
browser_handler_on_console_message(struct _acf_browser_handler_t* self,
                                   struct _acf_browser_t* browser,
                                   int level,
                                   const acf_string_t* message,
                                   const acf_string_t* source,
                                   int line,
                                   const acf_string_t* trace) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  if (!browser) {
    return;
  }
  // Unverified params: message, source, trace

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnConsoleMessage(
      AcfBrowserCToCpp::Wrap(browser), level, AcfString(message),
      AcfString(source), line, AcfString(trace));
}

void ACF_CALLBACK
browser_handler_on_loading_progress_change(struct _acf_browser_handler_t* self,
                                           struct _acf_browser_t* browser,
                                           double progress) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  if (!browser) {
    return;
  }

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnLoadingProgressChange(
      AcfBrowserCToCpp::Wrap(browser), progress);
}

void ACF_CALLBACK
browser_handler_on_audio_state_change(struct _acf_browser_handler_t* self,
                                      struct _acf_browser_t* browser,
                                      int audible) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  if (!browser) {
    return;
  }

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->OnAudioStateChange(
      AcfBrowserCToCpp::Wrap(browser), audible ? true : false);
}

struct _acf_web_socket_client_handler_t* ACF_CALLBACK
browser_handler_create_web_socket(struct _acf_browser_handler_t* self,
                                  struct _acf_browser_t* browser,
                                  acf_string_t* target_url) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return NULL;
  }
  // Verify param: browser; type: refptr_diff
  if (!browser) {
    return NULL;
  }
  // Verify param: target_url; type: string_byref
  if (!target_url) {
    return NULL;
  }

  // Translate param: target_url; type: string_byref
  AcfString target_urlStr(target_url);

  // Execute
  AcfRefPtr<AcfWebSocketClientHandler> _retval =
      AcfBrowserHandlerCppToC::Get(self)->CreateWebSocket(
          AcfBrowserCToCpp::Wrap(browser), target_urlStr);

  // Return type: refptr_same
  return AcfWebSocketClientHandlerCppToC::Wrap(_retval);
}

void ACF_CALLBACK
browser_handler_did_start_loading(struct _acf_browser_handler_t* self,
                                  struct _acf_browser_t* browser) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  if (!browser) {
    return;
  }

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->DidStartLoading(
      AcfBrowserCToCpp::Wrap(browser));
}

void ACF_CALLBACK
browser_handler_did_stop_loading(struct _acf_browser_handler_t* self,
                                 struct _acf_browser_t* browser) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  if (!browser) {
    return;
  }

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->DidStopLoading(
      AcfBrowserCToCpp::Wrap(browser));
}

void ACF_CALLBACK
browser_handler_load_progress_changed(struct _acf_browser_handler_t* self,
                                      struct _acf_browser_t* browser,
                                      double progress) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return;
  }
  // Verify param: browser; type: refptr_diff
  if (!browser) {
    return;
  }

  // Execute
  AcfBrowserHandlerCppToC::Get(self)->LoadProgressChanged(
      AcfBrowserCToCpp::Wrap(browser), progress);
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

AcfBrowserHandlerCppToC::AcfBrowserHandlerCppToC() {
  GetStruct()->on_browser_created = browser_handler_on_browser_created;
  GetStruct()->on_new_window_request = browser_handler_on_new_window_request;
  GetStruct()->on_browser_destroyed = browser_handler_on_browser_destroyed;
  GetStruct()->on_loading_state_changed =
      browser_handler_on_loading_state_changed;
  GetStruct()->on_navigation_state_changed =
      browser_handler_on_navigation_state_changed;
  GetStruct()->on_activate_contents = browser_handler_on_activate_contents;
  GetStruct()->on_fullscreen_state_changed =
      browser_handler_on_fullscreen_state_changed;
  GetStruct()->on_context_menu_request =
      browser_handler_on_context_menu_request;
  GetStruct()->on_context_menu_execute =
      browser_handler_on_context_menu_execute;
  GetStruct()->on_file_dialog = browser_handler_on_file_dialog;
  GetStruct()->on_java_script_dialog = browser_handler_on_java_script_dialog;
  GetStruct()->on_before_unload_dialog =
      browser_handler_on_before_unload_dialog;
  GetStruct()->on_handle_java_script_dialog =
      browser_handler_on_handle_java_script_dialog;
  GetStruct()->on_cancel_java_script_dialogs =
      browser_handler_on_cancel_java_script_dialogs;
  GetStruct()->on_auth_login_request = browser_handler_on_auth_login_request;
  GetStruct()->on_show_permission_prompt =
      browser_handler_on_show_permission_prompt;
  GetStruct()->on_dismiss_permission_prompt =
      browser_handler_on_dismiss_permission_prompt;
  GetStruct()->on_before_navigation = browser_handler_on_before_navigation;
  GetStruct()->on_console_message = browser_handler_on_console_message;
  GetStruct()->on_loading_progress_change =
      browser_handler_on_loading_progress_change;
  GetStruct()->on_audio_state_change = browser_handler_on_audio_state_change;
  GetStruct()->create_web_socket = browser_handler_create_web_socket;
  GetStruct()->did_start_loading = browser_handler_did_start_loading;
  GetStruct()->did_stop_loading = browser_handler_did_stop_loading;
  GetStruct()->load_progress_changed = browser_handler_load_progress_changed;
}

// DESTRUCTOR - Do not edit by hand.

AcfBrowserHandlerCppToC::~AcfBrowserHandlerCppToC() {}

template <>
AcfRefPtr<AcfBrowserHandler> AcfCppToCRefCounted<
    AcfBrowserHandlerCppToC,
    AcfBrowserHandler,
    acf_browser_handler_t>::UnwrapDerived(AcfWrapperType type,
                                          acf_browser_handler_t* s) {
  return nullptr;
}

template <>
AcfWrapperType AcfCppToCRefCounted<AcfBrowserHandlerCppToC,
                                   AcfBrowserHandler,
                                   acf_browser_handler_t>::kWrapperType =
    WT_BROWSER_HANDLER;
