// Copyright (c) 2025 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=cbdfc585aa3b3f706b029c180a4fcd82cb16a87b$
//

#include "libacf_dll/cpptoc/function_factory_cpptoc.h"

#include "libacf_dll/cpptoc/function_handler_cpptoc.h"
#include "libacf_dll/ctocpp/browser_ctocpp.h"
#include "libacf_dll/ctocpp/frame_ctocpp.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

acf_function_handler_t* ACF_CALLBACK
function_factory_create_host(struct _acf_function_factory_t* self,
                             acf_browser_t* browser,
                             const acf_string_t* origin,
                             acf_frame_t* frame) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return NULL;
  }
  // Verify param: browser; type: refptr_diff
  if (!browser) {
    return NULL;
  }
  // Unverified params: origin, frame

  // Execute
  AcfRefPtr<AcfFunctionHandler> _retval =
      AcfFunctionFactoryCppToC::Get(self)->CreateHost(
          AcfBrowserCToCpp::Wrap(browser), AcfString(origin),
          AcfFrameCToCpp::Wrap(frame));

  // Return type: refptr_same
  return AcfFunctionHandlerCppToC::Wrap(_retval);
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

AcfFunctionFactoryCppToC::AcfFunctionFactoryCppToC() {
  GetStruct()->create_host = function_factory_create_host;
}

// DESTRUCTOR - Do not edit by hand.

AcfFunctionFactoryCppToC::~AcfFunctionFactoryCppToC() {}

template <>
AcfRefPtr<AcfFunctionFactory> AcfCppToCRefCounted<
    AcfFunctionFactoryCppToC,
    AcfFunctionFactory,
    acf_function_factory_t>::UnwrapDerived(AcfWrapperType type,
                                           acf_function_factory_t* s) {
  return nullptr;
}

template <>
AcfWrapperType AcfCppToCRefCounted<AcfFunctionFactoryCppToC,
                                   AcfFunctionFactory,
                                   acf_function_factory_t>::kWrapperType =
    WT_FUNCTION_FACTORY;
