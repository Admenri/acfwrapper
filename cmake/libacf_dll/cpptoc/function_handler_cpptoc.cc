// Copyright (c) 2025 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=720871354bc4d18db847e11632234d8f05618764$
//

#include "libacf_dll/cpptoc/function_handler_cpptoc.h"

#include "libacf_dll/ctocpp/promise_resolver_ctocpp.h"
#include "libacf_dll/ctocpp/value_ctocpp.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

void ACF_CALLBACK
function_handler_on_execute_function(struct _acf_function_handler_t* self,
                                     size_t argumentsCount,
                                     struct _acf_value_t* const* arguments,
                                     acf_promise_resolver_t* promise) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return;
  }
  // Verify param: promise; type: refptr_diff
  if (!promise) {
    return;
  }
  // Unverified params: arguments

  // Translate param: arguments; type: refptr_vec_diff_byref_const
  std::vector<AcfRefPtr<AcfValue>> argumentsList;
  if (argumentsCount > 0) {
    for (size_t i = 0; i < argumentsCount; ++i) {
      AcfRefPtr<AcfValue> argumentsVal = AcfValueCToCpp::Wrap(arguments[i]);
      argumentsList.push_back(argumentsVal);
    }
  }

  // Execute
  AcfFunctionHandlerCppToC::Get(self)->OnExecuteFunction(
      argumentsList, AcfPromiseResolverCToCpp::Wrap(promise));
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

AcfFunctionHandlerCppToC::AcfFunctionHandlerCppToC() {
  GetStruct()->on_execute_function = function_handler_on_execute_function;
}

// DESTRUCTOR - Do not edit by hand.

AcfFunctionHandlerCppToC::~AcfFunctionHandlerCppToC() {}

template <>
AcfRefPtr<AcfFunctionHandler> AcfCppToCRefCounted<
    AcfFunctionHandlerCppToC,
    AcfFunctionHandler,
    acf_function_handler_t>::UnwrapDerived(AcfWrapperType type,
                                           acf_function_handler_t* s) {
  return nullptr;
}

template <>
AcfWrapperType AcfCppToCRefCounted<AcfFunctionHandlerCppToC,
                                   AcfFunctionHandler,
                                   acf_function_handler_t>::kWrapperType =
    WT_FUNCTION_HANDLER;
