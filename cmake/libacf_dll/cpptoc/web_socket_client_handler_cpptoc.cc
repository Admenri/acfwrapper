// Copyright (c) 2025 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=a9b17afb9ca243494352ce6e19afff8333e5ae7d$
//

#include "libacf_dll/cpptoc/web_socket_client_handler_cpptoc.h"

#include "libacf_dll/ctocpp/value_ctocpp.h"
#include "libacf_dll/ctocpp/web_socket_client_ctocpp.h"

namespace {

// MEMBER FUNCTIONS - Body may be edited by hand.

void ACF_CALLBACK web_socket_client_handler_on_handshake_response(
    struct _acf_web_socket_client_handler_t* self,
    struct _acf_web_socket_client_t* client) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return;
  }
  // Verify param: client; type: refptr_diff
  if (!client) {
    return;
  }

  // Execute
  AcfWebSocketClientHandlerCppToC::Get(self)->OnHandshakeResponse(
      AcfWebSocketClientCToCpp::Wrap(client));
}

void ACF_CALLBACK web_socket_client_handler_on_failure(
    struct _acf_web_socket_client_handler_t* self,
    const acf_string_t* message,
    int net_err,
    int response_code) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return;
  }
  // Unverified params: message

  // Execute
  AcfWebSocketClientHandlerCppToC::Get(self)->OnFailure(AcfString(message),
                                                        net_err, response_code);
}

int ACF_CALLBACK web_socket_client_handler_on_received_message_from(
    struct _acf_web_socket_client_handler_t* self,
    acf_websocket_message_routing_t direction,
    acf_value_t* message) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return 0;
  }
  // Verify param: message; type: refptr_diff
  if (!message) {
    return 0;
  }

  // Execute
  bool _retval =
      AcfWebSocketClientHandlerCppToC::Get(self)->OnReceivedMessageFrom(
          direction, AcfValueCToCpp::Wrap(message));

  // Return type: bool
  return _retval;
}

void ACF_CALLBACK web_socket_client_handler_on_connection_closing(
    struct _acf_web_socket_client_handler_t* self) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  if (!self) {
    return;
  }

  // Execute
  AcfWebSocketClientHandlerCppToC::Get(self)->OnConnectionClosing();
}

}  // namespace

// CONSTRUCTOR - Do not edit by hand.

AcfWebSocketClientHandlerCppToC::AcfWebSocketClientHandlerCppToC() {
  GetStruct()->on_handshake_response =
      web_socket_client_handler_on_handshake_response;
  GetStruct()->on_failure = web_socket_client_handler_on_failure;
  GetStruct()->on_received_message_from =
      web_socket_client_handler_on_received_message_from;
  GetStruct()->on_connection_closing =
      web_socket_client_handler_on_connection_closing;
}

// DESTRUCTOR - Do not edit by hand.

AcfWebSocketClientHandlerCppToC::~AcfWebSocketClientHandlerCppToC() {}

template <>
AcfRefPtr<AcfWebSocketClientHandler>
AcfCppToCRefCounted<AcfWebSocketClientHandlerCppToC,
                    AcfWebSocketClientHandler,
                    acf_web_socket_client_handler_t>::
    UnwrapDerived(AcfWrapperType type, acf_web_socket_client_handler_t* s) {
  return nullptr;
}

template <>
AcfWrapperType
    AcfCppToCRefCounted<AcfWebSocketClientHandlerCppToC,
                        AcfWebSocketClientHandler,
                        acf_web_socket_client_handler_t>::kWrapperType =
        WT_WEB_SOCKET_CLIENT_HANDLER;
