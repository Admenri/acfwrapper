// Copyright (c) 2025 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=714f812843a36f92daeaa42e381540ba7d0a3549$
//

#include "libacf_dll/ctocpp/dictionary_value_ctocpp.h"

#include "libacf_dll/ctocpp/binary_value_ctocpp.h"
#include "libacf_dll/ctocpp/list_value_ctocpp.h"
#include "libacf_dll/ctocpp/value_ctocpp.h"
#include "libacf_dll/transfer_util.h"

// STATIC METHODS - Body may be edited by hand.

AcfRefPtr<AcfDictionaryValue> AcfDictionaryValue::Create() {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_dictionary_value_t* _retval = acf_dictionary_value_create();

  // Return type: refptr_same
  return AcfDictionaryValueCToCpp::Wrap(_retval);
}

// VIRTUAL METHODS - Body may be edited by hand.

bool AcfDictionaryValueCToCpp::IsValid() {
  acf_dictionary_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, is_valid)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_valid(_struct);

  // Return type: bool
  return _retval ? true : false;
}

bool AcfDictionaryValueCToCpp::IsOwned() {
  acf_dictionary_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, is_owned)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_owned(_struct);

  // Return type: bool
  return _retval ? true : false;
}

bool AcfDictionaryValueCToCpp::IsReadOnly() {
  acf_dictionary_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, is_read_only)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_read_only(_struct);

  // Return type: bool
  return _retval ? true : false;
}

bool AcfDictionaryValueCToCpp::IsSame(AcfRefPtr<AcfDictionaryValue> that) {
  acf_dictionary_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, is_same)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: that; type: refptr_same
  if (!that.get()) {
    return false;
  }

  // Execute
  int _retval =
      _struct->is_same(_struct, AcfDictionaryValueCToCpp::Unwrap(that));

  // Return type: bool
  return _retval ? true : false;
}

bool AcfDictionaryValueCToCpp::IsEqual(AcfRefPtr<AcfDictionaryValue> that) {
  acf_dictionary_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, is_equal)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: that; type: refptr_same
  if (!that.get()) {
    return false;
  }

  // Execute
  int _retval =
      _struct->is_equal(_struct, AcfDictionaryValueCToCpp::Unwrap(that));

  // Return type: bool
  return _retval ? true : false;
}

AcfRefPtr<AcfDictionaryValue> AcfDictionaryValueCToCpp::Copy(
    bool exclude_empty_children) {
  acf_dictionary_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, copy)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_dictionary_value_t* _retval =
      _struct->copy(_struct, exclude_empty_children);

  // Return type: refptr_same
  return AcfDictionaryValueCToCpp::Wrap(_retval);
}

size_t AcfDictionaryValueCToCpp::GetSize() {
  acf_dictionary_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_size)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  size_t _retval = _struct->get_size(_struct);

  // Return type: simple
  return _retval;
}

bool AcfDictionaryValueCToCpp::Clear() {
  acf_dictionary_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, clear)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->clear(_struct);

  // Return type: bool
  return _retval ? true : false;
}

bool AcfDictionaryValueCToCpp::HasKey(const AcfString& key) {
  acf_dictionary_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, has_key)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: key; type: string_byref_const
  if (key.empty()) {
    return false;
  }

  // Execute
  int _retval = _struct->has_key(_struct, key.GetStruct());

  // Return type: bool
  return _retval ? true : false;
}

bool AcfDictionaryValueCToCpp::GetKeys(KeyList& keys) {
  acf_dictionary_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_keys)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Translate param: keys; type: string_vec_byref
  acf_string_list_t keysList = acf_string_list_alloc();
  DCHECK(keysList);
  if (keysList) {
    transfer_string_list_contents(keys, keysList);
  }

  // Execute
  int _retval = _struct->get_keys(_struct, keysList);

  // Restore param:keys; type: string_vec_byref
  if (keysList) {
    keys.clear();
    transfer_string_list_contents(keysList, keys);
    acf_string_list_free(keysList);
  }

  // Return type: bool
  return _retval ? true : false;
}

bool AcfDictionaryValueCToCpp::Remove(const AcfString& key) {
  acf_dictionary_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, remove)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: key; type: string_byref_const
  if (key.empty()) {
    return false;
  }

  // Execute
  int _retval = _struct->remove(_struct, key.GetStruct());

  // Return type: bool
  return _retval ? true : false;
}

AcfValueType AcfDictionaryValueCToCpp::GetType(const AcfString& key) {
  acf_dictionary_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_type)) {
    return VTYPE_INVALID;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: key; type: string_byref_const
  if (key.empty()) {
    return VTYPE_INVALID;
  }

  // Execute
  acf_value_type_t _retval = _struct->get_type(_struct, key.GetStruct());

  // Return type: simple
  return _retval;
}

AcfRefPtr<AcfValue> AcfDictionaryValueCToCpp::GetValue(const AcfString& key) {
  acf_dictionary_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_value)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: key; type: string_byref_const
  if (key.empty()) {
    return nullptr;
  }

  // Execute
  acf_value_t* _retval = _struct->get_value(_struct, key.GetStruct());

  // Return type: refptr_same
  return AcfValueCToCpp::Wrap(_retval);
}

bool AcfDictionaryValueCToCpp::GetBool(const AcfString& key) {
  acf_dictionary_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_bool)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: key; type: string_byref_const
  if (key.empty()) {
    return false;
  }

  // Execute
  int _retval = _struct->get_bool(_struct, key.GetStruct());

  // Return type: bool
  return _retval ? true : false;
}

int AcfDictionaryValueCToCpp::GetInt(const AcfString& key) {
  acf_dictionary_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_int)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: key; type: string_byref_const
  if (key.empty()) {
    return 0;
  }

  // Execute
  int _retval = _struct->get_int(_struct, key.GetStruct());

  // Return type: simple
  return _retval;
}

double AcfDictionaryValueCToCpp::GetDouble(const AcfString& key) {
  acf_dictionary_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_double)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: key; type: string_byref_const
  if (key.empty()) {
    return 0;
  }

  // Execute
  double _retval = _struct->get_double(_struct, key.GetStruct());

  // Return type: simple
  return _retval;
}

AcfString AcfDictionaryValueCToCpp::GetString(const AcfString& key) {
  acf_dictionary_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_string)) {
    return AcfString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: key; type: string_byref_const
  if (key.empty()) {
    return AcfString();
  }

  // Execute
  acf_string_userfree_t _retval = _struct->get_string(_struct, key.GetStruct());

  // Return type: string
  AcfString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

AcfRefPtr<AcfBinaryValue> AcfDictionaryValueCToCpp::GetBinary(
    const AcfString& key) {
  acf_dictionary_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_binary)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: key; type: string_byref_const
  if (key.empty()) {
    return nullptr;
  }

  // Execute
  acf_binary_value_t* _retval = _struct->get_binary(_struct, key.GetStruct());

  // Return type: refptr_same
  return AcfBinaryValueCToCpp::Wrap(_retval);
}

AcfRefPtr<AcfDictionaryValue> AcfDictionaryValueCToCpp::GetDictionary(
    const AcfString& key) {
  acf_dictionary_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_dictionary)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: key; type: string_byref_const
  if (key.empty()) {
    return nullptr;
  }

  // Execute
  acf_dictionary_value_t* _retval =
      _struct->get_dictionary(_struct, key.GetStruct());

  // Return type: refptr_same
  return AcfDictionaryValueCToCpp::Wrap(_retval);
}

AcfRefPtr<AcfListValue> AcfDictionaryValueCToCpp::GetList(
    const AcfString& key) {
  acf_dictionary_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_list)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: key; type: string_byref_const
  if (key.empty()) {
    return nullptr;
  }

  // Execute
  acf_list_value_t* _retval = _struct->get_list(_struct, key.GetStruct());

  // Return type: refptr_same
  return AcfListValueCToCpp::Wrap(_retval);
}

bool AcfDictionaryValueCToCpp::SetValue(const AcfString& key,
                                        AcfRefPtr<AcfValue> value) {
  acf_dictionary_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_value)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: key; type: string_byref_const
  if (key.empty()) {
    return false;
  }
  // Verify param: value; type: refptr_same
  if (!value.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->set_value(_struct, key.GetStruct(),
                                   AcfValueCToCpp::Unwrap(value));

  // Return type: bool
  return _retval ? true : false;
}

bool AcfDictionaryValueCToCpp::SetNull(const AcfString& key) {
  acf_dictionary_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_null)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: key; type: string_byref_const
  if (key.empty()) {
    return false;
  }

  // Execute
  int _retval = _struct->set_null(_struct, key.GetStruct());

  // Return type: bool
  return _retval ? true : false;
}

bool AcfDictionaryValueCToCpp::SetBool(const AcfString& key, bool value) {
  acf_dictionary_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_bool)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: key; type: string_byref_const
  if (key.empty()) {
    return false;
  }

  // Execute
  int _retval = _struct->set_bool(_struct, key.GetStruct(), value);

  // Return type: bool
  return _retval ? true : false;
}

bool AcfDictionaryValueCToCpp::SetInt(const AcfString& key, int value) {
  acf_dictionary_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_int)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: key; type: string_byref_const
  if (key.empty()) {
    return false;
  }

  // Execute
  int _retval = _struct->set_int(_struct, key.GetStruct(), value);

  // Return type: bool
  return _retval ? true : false;
}

bool AcfDictionaryValueCToCpp::SetDouble(const AcfString& key, double value) {
  acf_dictionary_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_double)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: key; type: string_byref_const
  if (key.empty()) {
    return false;
  }

  // Execute
  int _retval = _struct->set_double(_struct, key.GetStruct(), value);

  // Return type: bool
  return _retval ? true : false;
}

bool AcfDictionaryValueCToCpp::SetString(const AcfString& key,
                                         const AcfString& value) {
  acf_dictionary_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_string)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: key; type: string_byref_const
  if (key.empty()) {
    return false;
  }
  // Unverified params: value

  // Execute
  int _retval =
      _struct->set_string(_struct, key.GetStruct(), value.GetStruct());

  // Return type: bool
  return _retval ? true : false;
}

bool AcfDictionaryValueCToCpp::SetBinary(const AcfString& key,
                                         AcfRefPtr<AcfBinaryValue> value) {
  acf_dictionary_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_binary)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: key; type: string_byref_const
  if (key.empty()) {
    return false;
  }
  // Verify param: value; type: refptr_same
  if (!value.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->set_binary(_struct, key.GetStruct(),
                                    AcfBinaryValueCToCpp::Unwrap(value));

  // Return type: bool
  return _retval ? true : false;
}

bool AcfDictionaryValueCToCpp::SetDictionary(
    const AcfString& key,
    AcfRefPtr<AcfDictionaryValue> value) {
  acf_dictionary_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_dictionary)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: key; type: string_byref_const
  if (key.empty()) {
    return false;
  }
  // Verify param: value; type: refptr_same
  if (!value.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->set_dictionary(
      _struct, key.GetStruct(), AcfDictionaryValueCToCpp::Unwrap(value));

  // Return type: bool
  return _retval ? true : false;
}

bool AcfDictionaryValueCToCpp::SetList(const AcfString& key,
                                       AcfRefPtr<AcfListValue> value) {
  acf_dictionary_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_list)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: key; type: string_byref_const
  if (key.empty()) {
    return false;
  }
  // Verify param: value; type: refptr_same
  if (!value.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->set_list(_struct, key.GetStruct(),
                                  AcfListValueCToCpp::Unwrap(value));

  // Return type: bool
  return _retval ? true : false;
}

// CONSTRUCTOR - Do not edit by hand.

AcfDictionaryValueCToCpp::AcfDictionaryValueCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

AcfDictionaryValueCToCpp::~AcfDictionaryValueCToCpp() {}

template <>
acf_dictionary_value_t* AcfCToCppRefCounted<
    AcfDictionaryValueCToCpp,
    AcfDictionaryValue,
    acf_dictionary_value_t>::UnwrapDerived(AcfWrapperType type,
                                           AcfDictionaryValue* c) {
  return nullptr;
}

template <>
AcfWrapperType AcfCToCppRefCounted<AcfDictionaryValueCToCpp,
                                   AcfDictionaryValue,
                                   acf_dictionary_value_t>::kWrapperType =
    WT_DICTIONARY_VALUE;
