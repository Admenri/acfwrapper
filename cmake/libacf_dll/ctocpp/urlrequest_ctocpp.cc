// Copyright (c) 2025 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=c2a14dbf0d6c4797457611ec7d5ec892aaffd061$
//

#include "libacf_dll/ctocpp/urlrequest_ctocpp.h"

#include "libacf_dll/cpptoc/urlrequest_client_cpptoc.h"
#include "libacf_dll/ctocpp/environment_ctocpp.h"
#include "libacf_dll/ctocpp/request_ctocpp.h"
#include "libacf_dll/ctocpp/response_ctocpp.h"

// VIRTUAL METHODS - Body may be edited by hand.

AcfRefPtr<AcfRequest> AcfURLRequestCToCpp::GetRequest() {
  acf_urlrequest_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_request)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_request_t* _retval = _struct->get_request(_struct);

  // Return type: refptr_same
  return AcfRequestCToCpp::Wrap(_retval);
}

AcfRefPtr<AcfURLRequestClient> AcfURLRequestCToCpp::GetClient() {
  acf_urlrequest_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_client)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_urlrequest_client_t* _retval = _struct->get_client(_struct);

  // Return type: refptr_diff
  return AcfURLRequestClientCppToC::Unwrap(_retval);
}

AcfRefPtr<AcfEnvironment> AcfURLRequestCToCpp::GetEnvironment() {
  acf_urlrequest_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_environment)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_environment_t* _retval = _struct->get_environment(_struct);

  // Return type: refptr_same
  return AcfEnvironmentCToCpp::Wrap(_retval);
}

uint32 AcfURLRequestCToCpp::GetFlags() {
  acf_urlrequest_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_flags)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  uint32 _retval = _struct->get_flags(_struct);

  // Return type: simple
  return _retval;
}

AcfRefPtr<AcfResponse> AcfURLRequestCToCpp::GetResponse() {
  acf_urlrequest_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_response)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_response_t* _retval = _struct->get_response(_struct);

  // Return type: refptr_same
  return AcfResponseCToCpp::Wrap(_retval);
}

void AcfURLRequestCToCpp::Cancel() {
  acf_urlrequest_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, cancel)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->cancel(_struct);
}

// CONSTRUCTOR - Do not edit by hand.

AcfURLRequestCToCpp::AcfURLRequestCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

AcfURLRequestCToCpp::~AcfURLRequestCToCpp() {}

template <>
acf_urlrequest_t*
AcfCToCppRefCounted<AcfURLRequestCToCpp, AcfURLRequest, acf_urlrequest_t>::
    UnwrapDerived(AcfWrapperType type, AcfURLRequest* c) {
  return nullptr;
}

template <>
AcfWrapperType AcfCToCppRefCounted<AcfURLRequestCToCpp,
                                   AcfURLRequest,
                                   acf_urlrequest_t>::kWrapperType =
    WT_URLREQUEST;
