// Copyright (c) 2025 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=31331970aee57e3a1d574562cc4d5688d87a6a54$
//

#include "libacf_dll/ctocpp/frame_ctocpp.h"

#include "libacf_dll/cpptoc/domdocument_callback_cpptoc.h"
#include "libacf_dll/cpptoc/domnode_callback_cpptoc.h"
#include "libacf_dll/cpptoc/execute_javascript_callback_cpptoc.h"
#include "libacf_dll/cpptoc/string_visitor_cpptoc.h"
#include "libacf_dll/ctocpp/browser_ctocpp.h"

// VIRTUAL METHODS - Body may be edited by hand.

bool AcfFrameCToCpp::IsValid() {
  acf_frame_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, is_valid)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_valid(_struct);

  // Return type: bool
  return _retval ? true : false;
}

bool AcfFrameCToCpp::IsSame(AcfRefPtr<AcfFrame> object) {
  acf_frame_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, is_same)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: object; type: refptr_same
  if (!object.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->is_same(_struct, AcfFrameCToCpp::Unwrap(object));

  // Return type: bool
  return _retval ? true : false;
}

AcfRefPtr<AcfFrame> AcfFrameCToCpp::GetParent() {
  acf_frame_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_parent)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_frame_t* _retval = _struct->get_parent(_struct);

  // Return type: refptr_same
  return AcfFrameCToCpp::Wrap(_retval);
}

AcfRefPtr<AcfBrowser> AcfFrameCToCpp::GetBrowser() {
  acf_frame_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_browser)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_browser_t* _retval = _struct->get_browser(_struct);

  // Return type: refptr_same
  return AcfBrowserCToCpp::Wrap(_retval);
}

AcfString AcfFrameCToCpp::GetURL() {
  acf_frame_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_url)) {
    return AcfString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_string_userfree_t _retval = _struct->get_url(_struct);

  // Return type: string
  AcfString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

AcfString AcfFrameCToCpp::GetName() {
  acf_frame_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_name)) {
    return AcfString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_string_userfree_t _retval = _struct->get_name(_struct);

  // Return type: string
  AcfString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

int64 AcfFrameCToCpp::GetIdentifier() {
  acf_frame_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_identifier)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int64 _retval = _struct->get_identifier(_struct);

  // Return type: simple
  return _retval;
}

bool AcfFrameCToCpp::IsMain() {
  acf_frame_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, is_main)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_main(_struct);

  // Return type: bool
  return _retval ? true : false;
}

void AcfFrameCToCpp::ExecuteJavascript(
    const AcfString& script,
    const AcfString& url,
    AcfRefPtr<AcfExecuteJavascriptCallback> handler) {
  acf_frame_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, execute_javascript)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: script, url, handler

  // Execute
  _struct->execute_javascript(
      _struct, script.GetStruct(), url.GetStruct(),
      AcfExecuteJavascriptCallbackCppToC::Wrap(handler));
}

void AcfFrameCToCpp::GetSource(AcfRefPtr<AcfStringVisitor> visitor) {
  acf_frame_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_source)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: visitor; type: refptr_diff
  if (!visitor.get()) {
    return;
  }

  // Execute
  _struct->get_source(_struct, AcfStringVisitorCppToC::Wrap(visitor));
}

void AcfFrameCToCpp::GetDOMDocument(AcfRefPtr<AcfDOMDocumentCallback> visitor) {
  acf_frame_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_domdocument)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: visitor; type: refptr_diff
  if (!visitor.get()) {
    return;
  }

  // Execute
  _struct->get_domdocument(_struct,
                           AcfDOMDocumentCallbackCppToC::Wrap(visitor));
}

void AcfFrameCToCpp::QuerySelectorAll(const AcfString& selector,
                                      AcfRefPtr<AcfDOMNodeCallback> visitor) {
  acf_frame_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, query_selector_all)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: selector; type: string_byref_const
  if (selector.empty()) {
    return;
  }
  // Verify param: visitor; type: refptr_diff
  if (!visitor.get()) {
    return;
  }

  // Execute
  _struct->query_selector_all(_struct, selector.GetStruct(),
                              AcfDOMNodeCallbackCppToC::Wrap(visitor));
}

// CONSTRUCTOR - Do not edit by hand.

AcfFrameCToCpp::AcfFrameCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

AcfFrameCToCpp::~AcfFrameCToCpp() {}

template <>
acf_frame_t*
AcfCToCppRefCounted<AcfFrameCToCpp, AcfFrame, acf_frame_t>::UnwrapDerived(
    AcfWrapperType type,
    AcfFrame* c) {
  return nullptr;
}

template <>
AcfWrapperType
    AcfCToCppRefCounted<AcfFrameCToCpp, AcfFrame, acf_frame_t>::kWrapperType =
        WT_FRAME;
