// Copyright (c) 2025 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=6bd5a0fa82638166a3003b76eaefd9fe7079857c$
//

#include "libacf_dll/ctocpp/environment_ctocpp.h"

#include "libacf_dll/cpptoc/browser_handler_cpptoc.h"
#include "libacf_dll/cpptoc/complete_handler_cpptoc.h"
#include "libacf_dll/cpptoc/environment_handler_cpptoc.h"
#include "libacf_dll/cpptoc/urlrequest_client_cpptoc.h"
#include "libacf_dll/ctocpp/browser_ctocpp.h"
#include "libacf_dll/ctocpp/dictionary_value_ctocpp.h"
#include "libacf_dll/ctocpp/frame_ctocpp.h"
#include "libacf_dll/ctocpp/profile_ctocpp.h"
#include "libacf_dll/ctocpp/request_ctocpp.h"
#include "libacf_dll/ctocpp/urlrequest_ctocpp.h"
#include "libacf_dll/ctocpp/value_ctocpp.h"
#include "libacf_dll/transfer_util.h"

// STATIC METHODS - Body may be edited by hand.

AcfRefPtr<AcfEnvironment> AcfEnvironment::CreateEnvironment(
    const AcfString& browser_path,
    const ExtraCommandLine& extra_command_line,
    const AcfEnvironmentSettings& settings,
    AcfRefPtr<AcfEnvironmentHandler> handler) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser_path; type: string_byref_const
  if (browser_path.empty()) {
    return nullptr;
  }
  // Unverified params: extra_command_line, handler

  // Translate param: extra_command_line; type: string_map_multi_byref_const
  acf_string_multimap_t extra_command_lineMultimap =
      acf_string_multimap_alloc();
  DCHECK(extra_command_lineMultimap);
  if (extra_command_lineMultimap) {
    transfer_string_multimap_contents(extra_command_line,
                                      extra_command_lineMultimap);
  }

  // Execute
  acf_environment_t* _retval = acf_environment_create(
      browser_path.GetStruct(), extra_command_lineMultimap, &settings,
      AcfEnvironmentHandlerCppToC::Wrap(handler));

  // Restore param:extra_command_line; type: string_map_multi_byref_const
  if (extra_command_lineMultimap) {
    acf_string_multimap_free(extra_command_lineMultimap);
  }

  // Return type: refptr_same
  return AcfEnvironmentCToCpp::Wrap(_retval);
}

// VIRTUAL METHODS - Body may be edited by hand.

bool AcfEnvironmentCToCpp::IsSame(AcfRefPtr<AcfEnvironment> that) {
  acf_environment_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, is_same)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: that; type: refptr_same
  if (!that.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->is_same(_struct, AcfEnvironmentCToCpp::Unwrap(that));

  // Return type: bool
  return _retval ? true : false;
}

bool AcfEnvironmentCToCpp::IsValid() {
  acf_environment_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, is_valid)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_valid(_struct);

  // Return type: bool
  return _retval ? true : false;
}

AcfString AcfEnvironmentCToCpp::GetKernelVersion() {
  acf_environment_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_kernel_version)) {
    return AcfString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_string_userfree_t _retval = _struct->get_kernel_version(_struct);

  // Return type: string
  AcfString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

AcfRefPtr<AcfProfile> AcfEnvironmentCToCpp::GetDefaultProfile() {
  acf_environment_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_default_profile)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_profile_t* _retval = _struct->get_default_profile(_struct);

  // Return type: refptr_same
  return AcfProfileCToCpp::Wrap(_retval);
}

AcfRefPtr<AcfProfile> AcfEnvironmentCToCpp::CreateProfile(
    const AcfProfileCreateParams& params,
    AcfRefPtr<AcfCompleteHandler> handler) {
  acf_environment_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, create_profile)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: handler

  // Execute
  acf_profile_t* _retval = _struct->create_profile(
      _struct, &params, AcfCompleteHandlerCppToC::Wrap(handler));

  // Return type: refptr_same
  return AcfProfileCToCpp::Wrap(_retval);
}

AcfRefPtr<AcfBrowser> AcfEnvironmentCToCpp::CreateBrowser(
    AcfRefPtr<AcfProfile> profile,
    AcfRefPtr<AcfBrowserHandler> handler,
    const AcfBrowserSettings& settings,
    const AcfBrowserCreateParams& params,
    AcfRefPtr<AcfDictionaryValue> extra_info) {
  acf_environment_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, create_browser)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: profile, handler, extra_info

  // Execute
  acf_browser_t* _retval = _struct->create_browser(
      _struct, AcfProfileCToCpp::Unwrap(profile),
      AcfBrowserHandlerCppToC::Wrap(handler), &settings, &params,
      AcfDictionaryValueCToCpp::Unwrap(extra_info));

  // Return type: refptr_same
  return AcfBrowserCToCpp::Wrap(_retval);
}

AcfRefPtr<AcfURLRequest> AcfEnvironmentCToCpp::CreateURLRequest(
    AcfRefPtr<AcfRequest> request,
    uint32 flags,
    AcfRefPtr<AcfURLRequestClient> client,
    AcfRefPtr<AcfFrame> frame,
    AcfRefPtr<AcfProfile> profile) {
  acf_environment_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, create_urlrequest)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: request; type: refptr_same
  if (!request.get()) {
    return nullptr;
  }
  // Verify param: client; type: refptr_diff
  if (!client.get()) {
    return nullptr;
  }
  // Unverified params: frame, profile

  // Execute
  acf_urlrequest_t* _retval = _struct->create_urlrequest(
      _struct, AcfRequestCToCpp::Unwrap(request), flags,
      AcfURLRequestClientCppToC::Wrap(client), AcfFrameCToCpp::Unwrap(frame),
      AcfProfileCToCpp::Unwrap(profile));

  // Return type: refptr_same
  return AcfURLRequestCToCpp::Wrap(_retval);
}

void AcfEnvironmentCToCpp::SetNetworkContextProfile(
    AcfRefPtr<AcfValue> tokens) {
  acf_environment_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_network_context_profile)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: tokens

  // Execute
  _struct->set_network_context_profile(_struct, AcfValueCToCpp::Unwrap(tokens));
}

// CONSTRUCTOR - Do not edit by hand.

AcfEnvironmentCToCpp::AcfEnvironmentCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

AcfEnvironmentCToCpp::~AcfEnvironmentCToCpp() {}

template <>
acf_environment_t*
AcfCToCppRefCounted<AcfEnvironmentCToCpp, AcfEnvironment, acf_environment_t>::
    UnwrapDerived(AcfWrapperType type, AcfEnvironment* c) {
  return nullptr;
}

template <>
AcfWrapperType AcfCToCppRefCounted<AcfEnvironmentCToCpp,
                                   AcfEnvironment,
                                   acf_environment_t>::kWrapperType =
    WT_ENVIRONMENT;
