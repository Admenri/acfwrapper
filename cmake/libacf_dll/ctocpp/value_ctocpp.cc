// Copyright (c) 2025 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=09df54e16bdb7a13c0d8b89f52a50e7939c9346a$
//

#include "libacf_dll/ctocpp/value_ctocpp.h"

#include "libacf_dll/ctocpp/binary_value_ctocpp.h"
#include "libacf_dll/ctocpp/dictionary_value_ctocpp.h"
#include "libacf_dll/ctocpp/list_value_ctocpp.h"

// STATIC METHODS - Body may be edited by hand.

AcfRefPtr<AcfValue> AcfValue::Create() {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_value_t* _retval = acf_value_create();

  // Return type: refptr_same
  return AcfValueCToCpp::Wrap(_retval);
}

// VIRTUAL METHODS - Body may be edited by hand.

bool AcfValueCToCpp::IsValid() {
  acf_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, is_valid)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_valid(_struct);

  // Return type: bool
  return _retval ? true : false;
}

bool AcfValueCToCpp::IsOwned() {
  acf_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, is_owned)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_owned(_struct);

  // Return type: bool
  return _retval ? true : false;
}

bool AcfValueCToCpp::IsReadOnly() {
  acf_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, is_read_only)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_read_only(_struct);

  // Return type: bool
  return _retval ? true : false;
}

bool AcfValueCToCpp::IsSame(AcfRefPtr<AcfValue> that) {
  acf_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, is_same)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: that; type: refptr_same
  if (!that.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->is_same(_struct, AcfValueCToCpp::Unwrap(that));

  // Return type: bool
  return _retval ? true : false;
}

bool AcfValueCToCpp::IsEqual(AcfRefPtr<AcfValue> that) {
  acf_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, is_equal)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: that; type: refptr_same
  if (!that.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->is_equal(_struct, AcfValueCToCpp::Unwrap(that));

  // Return type: bool
  return _retval ? true : false;
}

AcfRefPtr<AcfValue> AcfValueCToCpp::Copy() {
  acf_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, copy)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_value_t* _retval = _struct->copy(_struct);

  // Return type: refptr_same
  return AcfValueCToCpp::Wrap(_retval);
}

AcfValueType AcfValueCToCpp::GetType() {
  acf_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_type)) {
    return VTYPE_INVALID;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_value_type_t _retval = _struct->get_type(_struct);

  // Return type: simple
  return _retval;
}

bool AcfValueCToCpp::GetBool() {
  acf_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_bool)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->get_bool(_struct);

  // Return type: bool
  return _retval ? true : false;
}

int AcfValueCToCpp::GetInt() {
  acf_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_int)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->get_int(_struct);

  // Return type: simple
  return _retval;
}

double AcfValueCToCpp::GetDouble() {
  acf_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_double)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  double _retval = _struct->get_double(_struct);

  // Return type: simple
  return _retval;
}

AcfString AcfValueCToCpp::GetString() {
  acf_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_string)) {
    return AcfString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_string_userfree_t _retval = _struct->get_string(_struct);

  // Return type: string
  AcfString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

AcfRefPtr<AcfBinaryValue> AcfValueCToCpp::GetBinary() {
  acf_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_binary)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_binary_value_t* _retval = _struct->get_binary(_struct);

  // Return type: refptr_same
  return AcfBinaryValueCToCpp::Wrap(_retval);
}

AcfRefPtr<AcfDictionaryValue> AcfValueCToCpp::GetDictionary() {
  acf_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_dictionary)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_dictionary_value_t* _retval = _struct->get_dictionary(_struct);

  // Return type: refptr_same
  return AcfDictionaryValueCToCpp::Wrap(_retval);
}

AcfRefPtr<AcfListValue> AcfValueCToCpp::GetList() {
  acf_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_list)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_list_value_t* _retval = _struct->get_list(_struct);

  // Return type: refptr_same
  return AcfListValueCToCpp::Wrap(_retval);
}

bool AcfValueCToCpp::SetNull() {
  acf_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_null)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->set_null(_struct);

  // Return type: bool
  return _retval ? true : false;
}

bool AcfValueCToCpp::SetBool(bool value) {
  acf_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_bool)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->set_bool(_struct, value);

  // Return type: bool
  return _retval ? true : false;
}

bool AcfValueCToCpp::SetInt(int value) {
  acf_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_int)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->set_int(_struct, value);

  // Return type: bool
  return _retval ? true : false;
}

bool AcfValueCToCpp::SetDouble(double value) {
  acf_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_double)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->set_double(_struct, value);

  // Return type: bool
  return _retval ? true : false;
}

bool AcfValueCToCpp::SetString(const AcfString& value) {
  acf_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_string)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: value

  // Execute
  int _retval = _struct->set_string(_struct, value.GetStruct());

  // Return type: bool
  return _retval ? true : false;
}

bool AcfValueCToCpp::SetBinary(AcfRefPtr<AcfBinaryValue> value) {
  acf_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_binary)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: value; type: refptr_same
  if (!value.get()) {
    return false;
  }

  // Execute
  int _retval =
      _struct->set_binary(_struct, AcfBinaryValueCToCpp::Unwrap(value));

  // Return type: bool
  return _retval ? true : false;
}

bool AcfValueCToCpp::SetDictionary(AcfRefPtr<AcfDictionaryValue> value) {
  acf_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_dictionary)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: value; type: refptr_same
  if (!value.get()) {
    return false;
  }

  // Execute
  int _retval =
      _struct->set_dictionary(_struct, AcfDictionaryValueCToCpp::Unwrap(value));

  // Return type: bool
  return _retval ? true : false;
}

bool AcfValueCToCpp::SetList(AcfRefPtr<AcfListValue> value) {
  acf_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_list)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: value; type: refptr_same
  if (!value.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->set_list(_struct, AcfListValueCToCpp::Unwrap(value));

  // Return type: bool
  return _retval ? true : false;
}

// CONSTRUCTOR - Do not edit by hand.

AcfValueCToCpp::AcfValueCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

AcfValueCToCpp::~AcfValueCToCpp() {}

template <>
acf_value_t*
AcfCToCppRefCounted<AcfValueCToCpp, AcfValue, acf_value_t>::UnwrapDerived(
    AcfWrapperType type,
    AcfValue* c) {
  return nullptr;
}

template <>
AcfWrapperType
    AcfCToCppRefCounted<AcfValueCToCpp, AcfValue, acf_value_t>::kWrapperType =
        WT_VALUE;
