// Copyright (c) 2025 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=bf374b01c8138e0a58632fd72db689076e850e3b$
//

#include "libacf_dll/ctocpp/new_window_delegate_ctocpp.h"

#include "libacf_dll/ctocpp/browser_ctocpp.h"

// VIRTUAL METHODS - Body may be edited by hand.

bool AcfNewWindowDelegateCToCpp::SetNewBrowser(AcfRefPtr<AcfBrowser> browser) {
  acf_new_window_delegate_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_new_browser)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_same
  if (!browser.get()) {
    return false;
  }

  // Execute
  int _retval =
      _struct->set_new_browser(_struct, AcfBrowserCToCpp::Unwrap(browser));

  // Return type: bool
  return _retval ? true : false;
}

AcfString AcfNewWindowDelegateCToCpp::GetTargetURL() {
  acf_new_window_delegate_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_target_url)) {
    return AcfString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_string_userfree_t _retval = _struct->get_target_url(_struct);

  // Return type: string
  AcfString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

void AcfNewWindowDelegateCToCpp::HandleRequest(bool handled,
                                               bool suspend_loading) {
  acf_new_window_delegate_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, handle_request)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->handle_request(_struct, handled, suspend_loading);
}

// CONSTRUCTOR - Do not edit by hand.

AcfNewWindowDelegateCToCpp::AcfNewWindowDelegateCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

AcfNewWindowDelegateCToCpp::~AcfNewWindowDelegateCToCpp() {}

template <>
acf_new_window_delegate_t* AcfCToCppRefCounted<
    AcfNewWindowDelegateCToCpp,
    AcfNewWindowDelegate,
    acf_new_window_delegate_t>::UnwrapDerived(AcfWrapperType type,
                                              AcfNewWindowDelegate* c) {
  return nullptr;
}

template <>
AcfWrapperType AcfCToCppRefCounted<AcfNewWindowDelegateCToCpp,
                                   AcfNewWindowDelegate,
                                   acf_new_window_delegate_t>::kWrapperType =
    WT_NEW_WINDOW_DELEGATE;
