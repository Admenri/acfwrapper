// Copyright (c) 2025 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=94fc4a698bab22fafa609779ad4e208161d88346$
//

#include "libacf_dll/ctocpp/callback_ctocpp.h"

// VIRTUAL METHODS - Body may be edited by hand.

void AcfCallbackCToCpp::Continue(bool cancel) {
  acf_callback_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, cont)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->cont(_struct, cancel);
}

// CONSTRUCTOR - Do not edit by hand.

AcfCallbackCToCpp::AcfCallbackCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

AcfCallbackCToCpp::~AcfCallbackCToCpp() {}

template <>
acf_callback_t*
AcfCToCppRefCounted<AcfCallbackCToCpp, AcfCallback, acf_callback_t>::
    UnwrapDerived(AcfWrapperType type, AcfCallback* c) {
  return nullptr;
}

template <>
AcfWrapperType AcfCToCppRefCounted<AcfCallbackCToCpp,
                                   AcfCallback,
                                   acf_callback_t>::kWrapperType = WT_CALLBACK;
