// Copyright (c) 2025 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=d0fa9e69d8065808d14db841b003d00a0703372a$
//

#include "libacf_dll/ctocpp/domnode_ctocpp.h"

#include "libacf_dll/transfer_util.h"

// VIRTUAL METHODS - Body may be edited by hand.

AcfDOMNode::Type AcfDOMNodeCToCpp::GetType() {
  acf_domnode_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_type)) {
    return DOM_NODE_TYPE_UNSUPPORTED;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_dom_node_type_t _retval = _struct->get_type(_struct);

  // Return type: simple
  return _retval;
}

AcfString AcfDOMNodeCToCpp::GetName() {
  acf_domnode_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_name)) {
    return AcfString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_string_userfree_t _retval = _struct->get_name(_struct);

  // Return type: string
  AcfString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

AcfString AcfDOMNodeCToCpp::GetValue() {
  acf_domnode_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_value)) {
    return AcfString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_string_userfree_t _retval = _struct->get_value(_struct);

  // Return type: string
  AcfString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

AcfString AcfDOMNodeCToCpp::GetAsMarkup() {
  acf_domnode_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_as_markup)) {
    return AcfString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_string_userfree_t _retval = _struct->get_as_markup(_struct);

  // Return type: string
  AcfString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

int AcfDOMNodeCToCpp::GetChildNodeCount() {
  acf_domnode_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_child_node_count)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->get_child_node_count(_struct);

  // Return type: simple
  return _retval;
}

AcfRefPtr<AcfDOMNode> AcfDOMNodeCToCpp::GetChildNode(int index) {
  acf_domnode_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_child_node)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_domnode_t* _retval = _struct->get_child_node(_struct, index);

  // Return type: refptr_same
  return AcfDOMNodeCToCpp::Wrap(_retval);
}

AcfString AcfDOMNodeCToCpp::GetElementTagName() {
  acf_domnode_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_element_tag_name)) {
    return AcfString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_string_userfree_t _retval = _struct->get_element_tag_name(_struct);

  // Return type: string
  AcfString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

bool AcfDOMNodeCToCpp::HasElementAttributes() {
  acf_domnode_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, has_element_attributes)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->has_element_attributes(_struct);

  // Return type: bool
  return _retval ? true : false;
}

bool AcfDOMNodeCToCpp::HasElementAttribute(const AcfString& attrName) {
  acf_domnode_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, has_element_attribute)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: attrName; type: string_byref_const
  if (attrName.empty()) {
    return false;
  }

  // Execute
  int _retval = _struct->has_element_attribute(_struct, attrName.GetStruct());

  // Return type: bool
  return _retval ? true : false;
}

AcfString AcfDOMNodeCToCpp::GetElementAttribute(const AcfString& attrName) {
  acf_domnode_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_element_attribute)) {
    return AcfString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: attrName; type: string_byref_const
  if (attrName.empty()) {
    return AcfString();
  }

  // Execute
  acf_string_userfree_t _retval =
      _struct->get_element_attribute(_struct, attrName.GetStruct());

  // Return type: string
  AcfString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

void AcfDOMNodeCToCpp::GetElementAttributes(AttributeMap& attrMap) {
  acf_domnode_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_element_attributes)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Translate param: attrMap; type: string_map_single_byref
  acf_string_map_t attrMapMap = acf_string_map_alloc();
  DCHECK(attrMapMap);
  if (attrMapMap) {
    transfer_string_map_contents(attrMap, attrMapMap);
  }

  // Execute
  _struct->get_element_attributes(_struct, attrMapMap);

  // Restore param:attrMap; type: string_map_single_byref
  if (attrMapMap) {
    attrMap.clear();
    transfer_string_map_contents(attrMapMap, attrMap);
    acf_string_map_free(attrMapMap);
  }
}

AcfString AcfDOMNodeCToCpp::GetElementInnerText() {
  acf_domnode_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_element_inner_text)) {
    return AcfString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_string_userfree_t _retval = _struct->get_element_inner_text(_struct);

  // Return type: string
  AcfString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

AcfRect AcfDOMNodeCToCpp::GetElementBounds() {
  acf_domnode_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_element_bounds)) {
    return AcfRect();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_rect_t _retval = _struct->get_element_bounds(_struct);

  // Return type: simple
  return _retval;
}

// CONSTRUCTOR - Do not edit by hand.

AcfDOMNodeCToCpp::AcfDOMNodeCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

AcfDOMNodeCToCpp::~AcfDOMNodeCToCpp() {}

template <>
acf_domnode_t*
AcfCToCppRefCounted<AcfDOMNodeCToCpp, AcfDOMNode, acf_domnode_t>::UnwrapDerived(
    AcfWrapperType type,
    AcfDOMNode* c) {
  return nullptr;
}

template <>
AcfWrapperType AcfCToCppRefCounted<AcfDOMNodeCToCpp,
                                   AcfDOMNode,
                                   acf_domnode_t>::kWrapperType = WT_DOMNODE;
