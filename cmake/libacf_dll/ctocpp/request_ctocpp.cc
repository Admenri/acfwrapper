// Copyright (c) 2025 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=a279a821e65424e764f9e3f9a87f3d4be0489e88$
//

#include "libacf_dll/ctocpp/request_ctocpp.h"

#include "libacf_dll/ctocpp/post_data_ctocpp.h"
#include "libacf_dll/transfer_util.h"

// STATIC METHODS - Body may be edited by hand.

AcfRefPtr<AcfRequest> AcfRequest::Create() {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_request_t* _retval = acf_request_create();

  // Return type: refptr_same
  return AcfRequestCToCpp::Wrap(_retval);
}

// VIRTUAL METHODS - Body may be edited by hand.

bool AcfRequestCToCpp::IsReadOnly() {
  acf_request_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, is_read_only)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_read_only(_struct);

  // Return type: bool
  return _retval ? true : false;
}

AcfString AcfRequestCToCpp::GetURL() {
  acf_request_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_url)) {
    return AcfString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_string_userfree_t _retval = _struct->get_url(_struct);

  // Return type: string
  AcfString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

void AcfRequestCToCpp::SetURL(const AcfString& url) {
  acf_request_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_url)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: url; type: string_byref_const
  if (url.empty()) {
    return;
  }

  // Execute
  _struct->set_url(_struct, url.GetStruct());
}

AcfString AcfRequestCToCpp::GetMethod() {
  acf_request_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_method)) {
    return AcfString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_string_userfree_t _retval = _struct->get_method(_struct);

  // Return type: string
  AcfString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

void AcfRequestCToCpp::SetMethod(const AcfString& method) {
  acf_request_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_method)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: method; type: string_byref_const
  if (method.empty()) {
    return;
  }

  // Execute
  _struct->set_method(_struct, method.GetStruct());
}

void AcfRequestCToCpp::SetReferrer(const AcfString& referrer_url,
                                   ReferrerPolicy policy) {
  acf_request_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_referrer)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: referrer_url

  // Execute
  _struct->set_referrer(_struct, referrer_url.GetStruct(), policy);
}

AcfString AcfRequestCToCpp::GetReferrerURL() {
  acf_request_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_referrer_url)) {
    return AcfString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_string_userfree_t _retval = _struct->get_referrer_url(_struct);

  // Return type: string
  AcfString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

AcfRequest::ReferrerPolicy AcfRequestCToCpp::GetReferrerPolicy() {
  acf_request_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_referrer_policy)) {
    return REFERRER_POLICY_DEFAULT;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_referrer_policy_t _retval = _struct->get_referrer_policy(_struct);

  // Return type: simple
  return _retval;
}

AcfRefPtr<AcfPostData> AcfRequestCToCpp::GetPostData() {
  acf_request_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_post_data)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_post_data_t* _retval = _struct->get_post_data(_struct);

  // Return type: refptr_same
  return AcfPostDataCToCpp::Wrap(_retval);
}

void AcfRequestCToCpp::SetPostData(AcfRefPtr<AcfPostData> postData) {
  acf_request_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_post_data)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: postData; type: refptr_same
  if (!postData.get()) {
    return;
  }

  // Execute
  _struct->set_post_data(_struct, AcfPostDataCToCpp::Unwrap(postData));
}

void AcfRequestCToCpp::GetHeaderMap(HeaderMap& headerMap) {
  acf_request_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_header_map)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Translate param: headerMap; type: string_map_multi_byref
  acf_string_multimap_t headerMapMultimap = acf_string_multimap_alloc();
  DCHECK(headerMapMultimap);
  if (headerMapMultimap) {
    transfer_string_multimap_contents(headerMap, headerMapMultimap);
  }

  // Execute
  _struct->get_header_map(_struct, headerMapMultimap);

  // Restore param:headerMap; type: string_map_multi_byref
  if (headerMapMultimap) {
    headerMap.clear();
    transfer_string_multimap_contents(headerMapMultimap, headerMap);
    acf_string_multimap_free(headerMapMultimap);
  }
}

void AcfRequestCToCpp::SetHeaderMap(const HeaderMap& headerMap) {
  acf_request_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_header_map)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Translate param: headerMap; type: string_map_multi_byref_const
  acf_string_multimap_t headerMapMultimap = acf_string_multimap_alloc();
  DCHECK(headerMapMultimap);
  if (headerMapMultimap) {
    transfer_string_multimap_contents(headerMap, headerMapMultimap);
  }

  // Execute
  _struct->set_header_map(_struct, headerMapMultimap);

  // Restore param:headerMap; type: string_map_multi_byref_const
  if (headerMapMultimap) {
    acf_string_multimap_free(headerMapMultimap);
  }
}

AcfString AcfRequestCToCpp::GetHeaderByName(const AcfString& name) {
  acf_request_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_header_by_name)) {
    return AcfString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: name; type: string_byref_const
  if (name.empty()) {
    return AcfString();
  }

  // Execute
  acf_string_userfree_t _retval =
      _struct->get_header_by_name(_struct, name.GetStruct());

  // Return type: string
  AcfString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

void AcfRequestCToCpp::SetHeaderByName(const AcfString& name,
                                       const AcfString& value,
                                       bool overwrite) {
  acf_request_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_header_by_name)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: name; type: string_byref_const
  if (name.empty()) {
    return;
  }
  // Unverified params: value

  // Execute
  _struct->set_header_by_name(_struct, name.GetStruct(), value.GetStruct(),
                              overwrite);
}

void AcfRequestCToCpp::Set(const AcfString& url,
                           const AcfString& method,
                           AcfRefPtr<AcfPostData> postData,
                           const HeaderMap& headerMap) {
  acf_request_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: url; type: string_byref_const
  if (url.empty()) {
    return;
  }
  // Verify param: method; type: string_byref_const
  if (method.empty()) {
    return;
  }
  // Unverified params: postData

  // Translate param: headerMap; type: string_map_multi_byref_const
  acf_string_multimap_t headerMapMultimap = acf_string_multimap_alloc();
  DCHECK(headerMapMultimap);
  if (headerMapMultimap) {
    transfer_string_multimap_contents(headerMap, headerMapMultimap);
  }

  // Execute
  _struct->set(_struct, url.GetStruct(), method.GetStruct(),
               AcfPostDataCToCpp::Unwrap(postData), headerMapMultimap);

  // Restore param:headerMap; type: string_map_multi_byref_const
  if (headerMapMultimap) {
    acf_string_multimap_free(headerMapMultimap);
  }
}

AcfRequest::ResourceType AcfRequestCToCpp::GetResourceType() {
  acf_request_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_resource_type)) {
    return RT_SUB_RESOURCE;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_resource_type_t _retval = _struct->get_resource_type(_struct);

  // Return type: simple
  return _retval;
}

AcfRequest::TransitionType AcfRequestCToCpp::GetTransitionType() {
  acf_request_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_transition_type)) {
    return PAGE_TRANSITION_LINK;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_transition_type_t _retval = _struct->get_transition_type(_struct);

  // Return type: simple
  return _retval;
}

uint64 AcfRequestCToCpp::GetIdentifier() {
  acf_request_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_identifier)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  uint64 _retval = _struct->get_identifier(_struct);

  // Return type: simple
  return _retval;
}

// CONSTRUCTOR - Do not edit by hand.

AcfRequestCToCpp::AcfRequestCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

AcfRequestCToCpp::~AcfRequestCToCpp() {}

template <>
acf_request_t*
AcfCToCppRefCounted<AcfRequestCToCpp, AcfRequest, acf_request_t>::UnwrapDerived(
    AcfWrapperType type,
    AcfRequest* c) {
  return nullptr;
}

template <>
AcfWrapperType AcfCToCppRefCounted<AcfRequestCToCpp,
                                   AcfRequest,
                                   acf_request_t>::kWrapperType = WT_REQUEST;
