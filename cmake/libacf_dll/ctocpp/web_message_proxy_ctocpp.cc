// Copyright (c) 2025 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=d0a9480a6c4fc620ea53d7ed17b0f75a63a3935d$
//

#include "libacf_dll/ctocpp/web_message_proxy_ctocpp.h"

#include "libacf_dll/ctocpp/value_ctocpp.h"

// VIRTUAL METHODS - Body may be edited by hand.

void AcfWebMessageProxyCToCpp::PostWebMessage(const WebMessage& message) {
  acf_web_message_proxy_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, post_web_message)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: message

  // Translate param: message; type: refptr_vec_same_byref_const
  const size_t messageCount = message.size();
  acf_value_t** messageList = NULL;
  if (messageCount > 0) {
    messageList = new acf_value_t*[messageCount];
    DCHECK(messageList);
    if (messageList) {
      for (size_t i = 0; i < messageCount; ++i) {
        messageList[i] = AcfValueCToCpp::Unwrap(message[i]);
      }
    }
  }

  // Execute
  _struct->post_web_message(_struct, messageCount, messageList);

  // Restore param:message; type: refptr_vec_same_byref_const
  if (messageList) {
    delete[] messageList;
  }
}

bool AcfWebMessageProxyCToCpp::IsInBackForwardCache() {
  acf_web_message_proxy_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, is_in_back_forward_cache)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_in_back_forward_cache(_struct);

  // Return type: bool
  return _retval ? true : false;
}

// CONSTRUCTOR - Do not edit by hand.

AcfWebMessageProxyCToCpp::AcfWebMessageProxyCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

AcfWebMessageProxyCToCpp::~AcfWebMessageProxyCToCpp() {}

template <>
acf_web_message_proxy_t* AcfCToCppRefCounted<
    AcfWebMessageProxyCToCpp,
    AcfWebMessageProxy,
    acf_web_message_proxy_t>::UnwrapDerived(AcfWrapperType type,
                                            AcfWebMessageProxy* c) {
  return nullptr;
}

template <>
AcfWrapperType AcfCToCppRefCounted<AcfWebMessageProxyCToCpp,
                                   AcfWebMessageProxy,
                                   acf_web_message_proxy_t>::kWrapperType =
    WT_WEB_MESSAGE_PROXY;
