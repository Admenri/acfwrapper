// Copyright (c) 2025 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=8721e353fcbfd14685c5c5767846b67014f3ab4b$
//

#include "libacf_dll/ctocpp/list_value_ctocpp.h"

#include "libacf_dll/ctocpp/binary_value_ctocpp.h"
#include "libacf_dll/ctocpp/dictionary_value_ctocpp.h"
#include "libacf_dll/ctocpp/value_ctocpp.h"

// STATIC METHODS - Body may be edited by hand.

AcfRefPtr<AcfListValue> AcfListValue::Create() {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_list_value_t* _retval = acf_list_value_create();

  // Return type: refptr_same
  return AcfListValueCToCpp::Wrap(_retval);
}

// VIRTUAL METHODS - Body may be edited by hand.

bool AcfListValueCToCpp::IsValid() {
  acf_list_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, is_valid)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_valid(_struct);

  // Return type: bool
  return _retval ? true : false;
}

bool AcfListValueCToCpp::IsOwned() {
  acf_list_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, is_owned)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_owned(_struct);

  // Return type: bool
  return _retval ? true : false;
}

bool AcfListValueCToCpp::IsReadOnly() {
  acf_list_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, is_read_only)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_read_only(_struct);

  // Return type: bool
  return _retval ? true : false;
}

bool AcfListValueCToCpp::IsSame(AcfRefPtr<AcfListValue> that) {
  acf_list_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, is_same)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: that; type: refptr_same
  if (!that.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->is_same(_struct, AcfListValueCToCpp::Unwrap(that));

  // Return type: bool
  return _retval ? true : false;
}

bool AcfListValueCToCpp::IsEqual(AcfRefPtr<AcfListValue> that) {
  acf_list_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, is_equal)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: that; type: refptr_same
  if (!that.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->is_equal(_struct, AcfListValueCToCpp::Unwrap(that));

  // Return type: bool
  return _retval ? true : false;
}

AcfRefPtr<AcfListValue> AcfListValueCToCpp::Copy() {
  acf_list_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, copy)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_list_value_t* _retval = _struct->copy(_struct);

  // Return type: refptr_same
  return AcfListValueCToCpp::Wrap(_retval);
}

bool AcfListValueCToCpp::SetSize(size_t size) {
  acf_list_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_size)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->set_size(_struct, size);

  // Return type: bool
  return _retval ? true : false;
}

size_t AcfListValueCToCpp::GetSize() {
  acf_list_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_size)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  size_t _retval = _struct->get_size(_struct);

  // Return type: simple
  return _retval;
}

bool AcfListValueCToCpp::Clear() {
  acf_list_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, clear)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->clear(_struct);

  // Return type: bool
  return _retval ? true : false;
}

bool AcfListValueCToCpp::Remove(size_t index) {
  acf_list_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, remove)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->remove(_struct, index);

  // Return type: bool
  return _retval ? true : false;
}

AcfValueType AcfListValueCToCpp::GetType(size_t index) {
  acf_list_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_type)) {
    return VTYPE_INVALID;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_value_type_t _retval = _struct->get_type(_struct, index);

  // Return type: simple
  return _retval;
}

AcfRefPtr<AcfValue> AcfListValueCToCpp::GetValue(size_t index) {
  acf_list_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_value)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_value_t* _retval = _struct->get_value(_struct, index);

  // Return type: refptr_same
  return AcfValueCToCpp::Wrap(_retval);
}

bool AcfListValueCToCpp::GetBool(size_t index) {
  acf_list_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_bool)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->get_bool(_struct, index);

  // Return type: bool
  return _retval ? true : false;
}

int AcfListValueCToCpp::GetInt(size_t index) {
  acf_list_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_int)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->get_int(_struct, index);

  // Return type: simple
  return _retval;
}

double AcfListValueCToCpp::GetDouble(size_t index) {
  acf_list_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_double)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  double _retval = _struct->get_double(_struct, index);

  // Return type: simple
  return _retval;
}

AcfString AcfListValueCToCpp::GetString(size_t index) {
  acf_list_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_string)) {
    return AcfString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_string_userfree_t _retval = _struct->get_string(_struct, index);

  // Return type: string
  AcfString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

AcfRefPtr<AcfBinaryValue> AcfListValueCToCpp::GetBinary(size_t index) {
  acf_list_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_binary)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_binary_value_t* _retval = _struct->get_binary(_struct, index);

  // Return type: refptr_same
  return AcfBinaryValueCToCpp::Wrap(_retval);
}

AcfRefPtr<AcfDictionaryValue> AcfListValueCToCpp::GetDictionary(size_t index) {
  acf_list_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_dictionary)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_dictionary_value_t* _retval = _struct->get_dictionary(_struct, index);

  // Return type: refptr_same
  return AcfDictionaryValueCToCpp::Wrap(_retval);
}

AcfRefPtr<AcfListValue> AcfListValueCToCpp::GetList(size_t index) {
  acf_list_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_list)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_list_value_t* _retval = _struct->get_list(_struct, index);

  // Return type: refptr_same
  return AcfListValueCToCpp::Wrap(_retval);
}

bool AcfListValueCToCpp::SetValue(size_t index, AcfRefPtr<AcfValue> value) {
  acf_list_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_value)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: value; type: refptr_same
  if (!value.get()) {
    return false;
  }

  // Execute
  int _retval =
      _struct->set_value(_struct, index, AcfValueCToCpp::Unwrap(value));

  // Return type: bool
  return _retval ? true : false;
}

bool AcfListValueCToCpp::SetNull(size_t index) {
  acf_list_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_null)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->set_null(_struct, index);

  // Return type: bool
  return _retval ? true : false;
}

bool AcfListValueCToCpp::SetBool(size_t index, bool value) {
  acf_list_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_bool)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->set_bool(_struct, index, value);

  // Return type: bool
  return _retval ? true : false;
}

bool AcfListValueCToCpp::SetInt(size_t index, int value) {
  acf_list_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_int)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->set_int(_struct, index, value);

  // Return type: bool
  return _retval ? true : false;
}

bool AcfListValueCToCpp::SetDouble(size_t index, double value) {
  acf_list_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_double)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->set_double(_struct, index, value);

  // Return type: bool
  return _retval ? true : false;
}

bool AcfListValueCToCpp::SetString(size_t index, const AcfString& value) {
  acf_list_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_string)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: value

  // Execute
  int _retval = _struct->set_string(_struct, index, value.GetStruct());

  // Return type: bool
  return _retval ? true : false;
}

bool AcfListValueCToCpp::SetBinary(size_t index,
                                   AcfRefPtr<AcfBinaryValue> value) {
  acf_list_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_binary)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: value; type: refptr_same
  if (!value.get()) {
    return false;
  }

  // Execute
  int _retval =
      _struct->set_binary(_struct, index, AcfBinaryValueCToCpp::Unwrap(value));

  // Return type: bool
  return _retval ? true : false;
}

bool AcfListValueCToCpp::SetDictionary(size_t index,
                                       AcfRefPtr<AcfDictionaryValue> value) {
  acf_list_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_dictionary)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: value; type: refptr_same
  if (!value.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->set_dictionary(
      _struct, index, AcfDictionaryValueCToCpp::Unwrap(value));

  // Return type: bool
  return _retval ? true : false;
}

bool AcfListValueCToCpp::SetList(size_t index, AcfRefPtr<AcfListValue> value) {
  acf_list_value_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_list)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: value; type: refptr_same
  if (!value.get()) {
    return false;
  }

  // Execute
  int _retval =
      _struct->set_list(_struct, index, AcfListValueCToCpp::Unwrap(value));

  // Return type: bool
  return _retval ? true : false;
}

// CONSTRUCTOR - Do not edit by hand.

AcfListValueCToCpp::AcfListValueCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

AcfListValueCToCpp::~AcfListValueCToCpp() {}

template <>
acf_list_value_t*
AcfCToCppRefCounted<AcfListValueCToCpp, AcfListValue, acf_list_value_t>::
    UnwrapDerived(AcfWrapperType type, AcfListValue* c) {
  return nullptr;
}

template <>
AcfWrapperType AcfCToCppRefCounted<AcfListValueCToCpp,
                                   AcfListValue,
                                   acf_list_value_t>::kWrapperType =
    WT_LIST_VALUE;
