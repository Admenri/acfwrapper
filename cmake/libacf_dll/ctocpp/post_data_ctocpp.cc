// Copyright (c) 2025 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=fda9f475105b3f496b48ff5da648f9903147e410$
//

#include "libacf_dll/ctocpp/post_data_ctocpp.h"

#include <algorithm>

#include "libacf_dll/ctocpp/post_data_element_ctocpp.h"

// STATIC METHODS - Body may be edited by hand.

AcfRefPtr<AcfPostData> AcfPostData::Create() {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_post_data_t* _retval = acf_post_data_create();

  // Return type: refptr_same
  return AcfPostDataCToCpp::Wrap(_retval);
}

// VIRTUAL METHODS - Body may be edited by hand.

bool AcfPostDataCToCpp::IsReadOnly() {
  acf_post_data_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, is_read_only)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_read_only(_struct);

  // Return type: bool
  return _retval ? true : false;
}

bool AcfPostDataCToCpp::HasExcludedElements() {
  acf_post_data_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, has_excluded_elements)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->has_excluded_elements(_struct);

  // Return type: bool
  return _retval ? true : false;
}

size_t AcfPostDataCToCpp::GetElementCount() {
  acf_post_data_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_element_count)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  size_t _retval = _struct->get_element_count(_struct);

  // Return type: simple
  return _retval;
}

void AcfPostDataCToCpp::GetElements(ElementVector& elements) {
  acf_post_data_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_elements)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Translate param: elements; type: refptr_vec_same_byref
  size_t elementsSize = elements.size();
  size_t elementsCount = std::max(GetElementCount(), elementsSize);
  acf_post_data_element_t** elementsList = NULL;
  if (elementsCount > 0) {
    elementsList = new acf_post_data_element_t*[elementsCount];
    DCHECK(elementsList);
    if (elementsList) {
      memset(elementsList, 0, sizeof(acf_post_data_element_t*) * elementsCount);
    }
    if (elementsList && elementsSize > 0) {
      for (size_t i = 0; i < elementsSize; ++i) {
        elementsList[i] = AcfPostDataElementCToCpp::Unwrap(elements[i]);
      }
    }
  }

  // Execute
  _struct->get_elements(_struct, &elementsCount, elementsList);

  // Restore param:elements; type: refptr_vec_same_byref
  elements.clear();
  if (elementsCount > 0 && elementsList) {
    for (size_t i = 0; i < elementsCount; ++i) {
      elements.push_back(AcfPostDataElementCToCpp::Wrap(elementsList[i]));
    }
    delete[] elementsList;
  }
}

bool AcfPostDataCToCpp::RemoveElement(AcfRefPtr<AcfPostDataElement> element) {
  acf_post_data_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, remove_element)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: element; type: refptr_same
  if (!element.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->remove_element(
      _struct, AcfPostDataElementCToCpp::Unwrap(element));

  // Return type: bool
  return _retval ? true : false;
}

bool AcfPostDataCToCpp::AddElement(AcfRefPtr<AcfPostDataElement> element) {
  acf_post_data_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, add_element)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: element; type: refptr_same
  if (!element.get()) {
    return false;
  }

  // Execute
  int _retval =
      _struct->add_element(_struct, AcfPostDataElementCToCpp::Unwrap(element));

  // Return type: bool
  return _retval ? true : false;
}

void AcfPostDataCToCpp::RemoveElements() {
  acf_post_data_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, remove_elements)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->remove_elements(_struct);
}

// CONSTRUCTOR - Do not edit by hand.

AcfPostDataCToCpp::AcfPostDataCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

AcfPostDataCToCpp::~AcfPostDataCToCpp() {}

template <>
acf_post_data_t*
AcfCToCppRefCounted<AcfPostDataCToCpp, AcfPostData, acf_post_data_t>::
    UnwrapDerived(AcfWrapperType type, AcfPostData* c) {
  return nullptr;
}

template <>
AcfWrapperType AcfCToCppRefCounted<AcfPostDataCToCpp,
                                   AcfPostData,
                                   acf_post_data_t>::kWrapperType =
    WT_POST_DATA;
