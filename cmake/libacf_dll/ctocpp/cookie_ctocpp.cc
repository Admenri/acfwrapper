// Copyright (c) 2025 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=d09cb125e26e8fe2d3ad2e4d510dcc5380c0190c$
//

#include "libacf_dll/ctocpp/cookie_ctocpp.h"

// STATIC METHODS - Body may be edited by hand.

AcfRefPtr<AcfCookie> AcfCookie::Create(const AcfString& url,
                                       const AcfString& name,
                                       const AcfString& value,
                                       const AcfString& domain,
                                       const AcfString& path,
                                       double expiry,
                                       bool secure,
                                       bool httponly,
                                       AcfCookieSameSite same_site,
                                       AcfCookiePriority priority) {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: url, name, value, domain, path

  // Execute
  acf_cookie_t* _retval = acf_cookie_create(
      url.GetStruct(), name.GetStruct(), value.GetStruct(), domain.GetStruct(),
      path.GetStruct(), expiry, secure, httponly, same_site, priority);

  // Return type: refptr_same
  return AcfCookieCToCpp::Wrap(_retval);
}

// VIRTUAL METHODS - Body may be edited by hand.

AcfString AcfCookieCToCpp::GetName() {
  acf_cookie_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_name)) {
    return AcfString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_string_userfree_t _retval = _struct->get_name(_struct);

  // Return type: string
  AcfString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

AcfString AcfCookieCToCpp::GetValue() {
  acf_cookie_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_value)) {
    return AcfString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_string_userfree_t _retval = _struct->get_value(_struct);

  // Return type: string
  AcfString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

AcfString AcfCookieCToCpp::GetDomain() {
  acf_cookie_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_domain)) {
    return AcfString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_string_userfree_t _retval = _struct->get_domain(_struct);

  // Return type: string
  AcfString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

AcfString AcfCookieCToCpp::GetPath() {
  acf_cookie_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_path)) {
    return AcfString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_string_userfree_t _retval = _struct->get_path(_struct);

  // Return type: string
  AcfString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

bool AcfCookieCToCpp::IsHttponly() {
  acf_cookie_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, is_httponly)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_httponly(_struct);

  // Return type: bool
  return _retval ? true : false;
}

bool AcfCookieCToCpp::IsSecure() {
  acf_cookie_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, is_secure)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_secure(_struct);

  // Return type: bool
  return _retval ? true : false;
}

AcfCookie::AcfCookieSameSite AcfCookieCToCpp::GetSameSite() {
  acf_cookie_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_same_site)) {
    return ACF_COOKIE_SAME_SITE_NO_RESTRICTION;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_cookie_same_site_t _retval = _struct->get_same_site(_struct);

  // Return type: simple
  return _retval;
}

AcfCookie::AcfCookiePriority AcfCookieCToCpp::GetPriority() {
  acf_cookie_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_priority)) {
    return ACF_COOKIE_PRIORITY_MEDIUM;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_cookie_priority_t _retval = _struct->get_priority(_struct);

  // Return type: simple
  return _retval;
}

double AcfCookieCToCpp::GetCreation() {
  acf_cookie_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_creation)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  double _retval = _struct->get_creation(_struct);

  // Return type: simple
  return _retval;
}

double AcfCookieCToCpp::GetExpiry() {
  acf_cookie_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_expiry)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  double _retval = _struct->get_expiry(_struct);

  // Return type: simple
  return _retval;
}

double AcfCookieCToCpp::GetLastAccess() {
  acf_cookie_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_last_access)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  double _retval = _struct->get_last_access(_struct);

  // Return type: simple
  return _retval;
}

double AcfCookieCToCpp::GetLastUpdate() {
  acf_cookie_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_last_update)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  double _retval = _struct->get_last_update(_struct);

  // Return type: simple
  return _retval;
}

// CONSTRUCTOR - Do not edit by hand.

AcfCookieCToCpp::AcfCookieCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

AcfCookieCToCpp::~AcfCookieCToCpp() {}

template <>
acf_cookie_t*
AcfCToCppRefCounted<AcfCookieCToCpp, AcfCookie, acf_cookie_t>::UnwrapDerived(
    AcfWrapperType type,
    AcfCookie* c) {
  return nullptr;
}

template <>
AcfWrapperType AcfCToCppRefCounted<AcfCookieCToCpp, AcfCookie, acf_cookie_t>::
    kWrapperType = WT_COOKIE;
