// Copyright (c) 2025 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=f81d69f68bacf186842478a3bc9efb80d737f5ce$
//

#include "libacf_dll/ctocpp/response_ctocpp.h"

#include "libacf_dll/transfer_util.h"

// STATIC METHODS - Body may be edited by hand.

AcfRefPtr<AcfResponse> AcfResponse::Create() {
  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_response_t* _retval = acf_response_create();

  // Return type: refptr_same
  return AcfResponseCToCpp::Wrap(_retval);
}

// VIRTUAL METHODS - Body may be edited by hand.

bool AcfResponseCToCpp::IsReadOnly() {
  acf_response_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, is_read_only)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_read_only(_struct);

  // Return type: bool
  return _retval ? true : false;
}

void AcfResponseCToCpp::Set(AcfRefPtr<AcfResponse> other) {
  acf_response_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: other

  // Execute
  _struct->set(_struct, AcfResponseCToCpp::Unwrap(other));
}

int AcfResponseCToCpp::GetError() {
  acf_response_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_error)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->get_error(_struct);

  // Return type: simple
  return _retval;
}

void AcfResponseCToCpp::SetError(int error) {
  acf_response_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_error)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_error(_struct, error);
}

int AcfResponseCToCpp::GetStatus() {
  acf_response_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_status)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->get_status(_struct);

  // Return type: simple
  return _retval;
}

void AcfResponseCToCpp::SetStatus(int status) {
  acf_response_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_status)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_status(_struct, status);
}

AcfString AcfResponseCToCpp::GetStatusText() {
  acf_response_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_status_text)) {
    return AcfString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_string_userfree_t _retval = _struct->get_status_text(_struct);

  // Return type: string
  AcfString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

void AcfResponseCToCpp::SetStatusText(const AcfString& statusText) {
  acf_response_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_status_text)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: statusText

  // Execute
  _struct->set_status_text(_struct, statusText.GetStruct());
}

AcfString AcfResponseCToCpp::GetMimeType() {
  acf_response_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_mime_type)) {
    return AcfString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_string_userfree_t _retval = _struct->get_mime_type(_struct);

  // Return type: string
  AcfString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

void AcfResponseCToCpp::SetMimeType(const AcfString& mimeType) {
  acf_response_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_mime_type)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: mimeType

  // Execute
  _struct->set_mime_type(_struct, mimeType.GetStruct());
}

AcfString AcfResponseCToCpp::GetCharset() {
  acf_response_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_charset)) {
    return AcfString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_string_userfree_t _retval = _struct->get_charset(_struct);

  // Return type: string
  AcfString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

void AcfResponseCToCpp::SetCharset(const AcfString& charset) {
  acf_response_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_charset)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: charset

  // Execute
  _struct->set_charset(_struct, charset.GetStruct());
}

AcfString AcfResponseCToCpp::GetHeaderByName(const AcfString& name) {
  acf_response_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_header_by_name)) {
    return AcfString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: name; type: string_byref_const
  if (name.empty()) {
    return AcfString();
  }

  // Execute
  acf_string_userfree_t _retval =
      _struct->get_header_by_name(_struct, name.GetStruct());

  // Return type: string
  AcfString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

void AcfResponseCToCpp::SetHeaderByName(const AcfString& name,
                                        const AcfString& value,
                                        bool overwrite) {
  acf_response_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_header_by_name)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: name; type: string_byref_const
  if (name.empty()) {
    return;
  }
  // Unverified params: value

  // Execute
  _struct->set_header_by_name(_struct, name.GetStruct(), value.GetStruct(),
                              overwrite);
}

void AcfResponseCToCpp::GetHeaderMap(HeaderMap& headerMap) {
  acf_response_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_header_map)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Translate param: headerMap; type: string_map_multi_byref
  acf_string_multimap_t headerMapMultimap = acf_string_multimap_alloc();
  DCHECK(headerMapMultimap);
  if (headerMapMultimap) {
    transfer_string_multimap_contents(headerMap, headerMapMultimap);
  }

  // Execute
  _struct->get_header_map(_struct, headerMapMultimap);

  // Restore param:headerMap; type: string_map_multi_byref
  if (headerMapMultimap) {
    headerMap.clear();
    transfer_string_multimap_contents(headerMapMultimap, headerMap);
    acf_string_multimap_free(headerMapMultimap);
  }
}

void AcfResponseCToCpp::SetHeaderMap(const HeaderMap& headerMap) {
  acf_response_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_header_map)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Translate param: headerMap; type: string_map_multi_byref_const
  acf_string_multimap_t headerMapMultimap = acf_string_multimap_alloc();
  DCHECK(headerMapMultimap);
  if (headerMapMultimap) {
    transfer_string_multimap_contents(headerMap, headerMapMultimap);
  }

  // Execute
  _struct->set_header_map(_struct, headerMapMultimap);

  // Restore param:headerMap; type: string_map_multi_byref_const
  if (headerMapMultimap) {
    acf_string_multimap_free(headerMapMultimap);
  }
}

AcfString AcfResponseCToCpp::GetURL() {
  acf_response_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_url)) {
    return AcfString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_string_userfree_t _retval = _struct->get_url(_struct);

  // Return type: string
  AcfString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

void AcfResponseCToCpp::SetURL(const AcfString& url) {
  acf_response_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_url)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: url

  // Execute
  _struct->set_url(_struct, url.GetStruct());
}

// CONSTRUCTOR - Do not edit by hand.

AcfResponseCToCpp::AcfResponseCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

AcfResponseCToCpp::~AcfResponseCToCpp() {}

template <>
acf_response_t*
AcfCToCppRefCounted<AcfResponseCToCpp, AcfResponse, acf_response_t>::
    UnwrapDerived(AcfWrapperType type, AcfResponse* c) {
  return nullptr;
}

template <>
AcfWrapperType AcfCToCppRefCounted<AcfResponseCToCpp,
                                   AcfResponse,
                                   acf_response_t>::kWrapperType = WT_RESPONSE;
