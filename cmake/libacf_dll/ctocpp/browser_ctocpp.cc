// Copyright (c) 2025 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=c4262a96fb2582a7edbe8b806091310b8fe33339$
//

#include "libacf_dll/ctocpp/browser_ctocpp.h"

#include <algorithm>

#include "libacf_dll/cpptoc/complete_value_handler_cpptoc.h"
#include "libacf_dll/cpptoc/dev_tools_message_observer_cpptoc.h"
#include "libacf_dll/cpptoc/function_factory_cpptoc.h"
#include "libacf_dll/cpptoc/web_message_factory_cpptoc.h"
#include "libacf_dll/ctocpp/dictionary_value_ctocpp.h"
#include "libacf_dll/ctocpp/environment_ctocpp.h"
#include "libacf_dll/ctocpp/frame_ctocpp.h"
#include "libacf_dll/ctocpp/profile_ctocpp.h"
#include "libacf_dll/ctocpp/registration_ctocpp.h"
#include "libacf_dll/ctocpp/value_ctocpp.h"
#include "libacf_dll/transfer_util.h"

// VIRTUAL METHODS - Body may be edited by hand.

bool AcfBrowserCToCpp::IsSame(AcfRefPtr<AcfBrowser> that) {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, is_same)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: that; type: refptr_same
  if (!that.get()) {
    return false;
  }

  // Execute
  int _retval = _struct->is_same(_struct, AcfBrowserCToCpp::Unwrap(that));

  // Return type: bool
  return _retval ? true : false;
}

AcfRefPtr<AcfDictionaryValue> AcfBrowserCToCpp::GetExtraInfo() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_extra_info)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_dictionary_value_t* _retval = _struct->get_extra_info(_struct);

  // Return type: refptr_same
  return AcfDictionaryValueCToCpp::Wrap(_retval);
}

AcfRefPtr<AcfEnvironment> AcfBrowserCToCpp::GetEnvironment() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_environment)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_environment_t* _retval = _struct->get_environment(_struct);

  // Return type: refptr_same
  return AcfEnvironmentCToCpp::Wrap(_retval);
}

void AcfBrowserCToCpp::Close(bool force) {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, close)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->close(_struct, force);
}

void AcfBrowserCToCpp::ResumeLoadingBrowser() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, resume_loading_browser)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->resume_loading_browser(_struct);
}

AcfWindowHandle AcfBrowserCToCpp::GetWindowHandle() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_window_handle)) {
    return NULL;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_window_handle_t _retval = _struct->get_window_handle(_struct);

  // Return type: simple
  return _retval;
}

bool AcfBrowserCToCpp::IsValid() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, is_valid)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_valid(_struct);

  // Return type: bool
  return _retval ? true : false;
}

bool AcfBrowserCToCpp::CanGoBack() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, can_go_back)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->can_go_back(_struct);

  // Return type: bool
  return _retval ? true : false;
}

bool AcfBrowserCToCpp::CanGoForward() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, can_go_forward)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->can_go_forward(_struct);

  // Return type: bool
  return _retval ? true : false;
}

void AcfBrowserCToCpp::GoBack() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, go_back)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->go_back(_struct);
}

void AcfBrowserCToCpp::GoForward() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, go_forward)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->go_forward(_struct);
}

void AcfBrowserCToCpp::Reload(bool ignore_cache) {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, reload)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->reload(_struct, ignore_cache);
}

void AcfBrowserCToCpp::Stop() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, stop)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->stop(_struct);
}

bool AcfBrowserCToCpp::IsLoading() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, is_loading)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_loading(_struct);

  // Return type: bool
  return _retval ? true : false;
}

void AcfBrowserCToCpp::LoadURL(const AcfString& url,
                               const AcfString& referrer_url,
                               acf_referrer_policy_t referrer_policy,
                               acf_transition_type_t transition_type,
                               const AcfString& extra_header) {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, load_url)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: url; type: string_byref_const
  if (url.empty()) {
    return;
  }
  // Unverified params: referrer_url, extra_header

  // Execute
  _struct->load_url(_struct, url.GetStruct(), referrer_url.GetStruct(),
                    referrer_policy, transition_type, extra_header.GetStruct());
}

AcfString AcfBrowserCToCpp::GetURL() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_url)) {
    return AcfString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_string_userfree_t _retval = _struct->get_url(_struct);

  // Return type: string
  AcfString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

AcfString AcfBrowserCToCpp::GetTitle() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_title)) {
    return AcfString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_string_userfree_t _retval = _struct->get_title(_struct);

  // Return type: string
  AcfString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

AcfString AcfBrowserCToCpp::GetFavicon() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_favicon)) {
    return AcfString();
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_string_userfree_t _retval = _struct->get_favicon(_struct);

  // Return type: string
  AcfString _retvalStr;
  _retvalStr.AttachToUserFree(_retval);
  return _retvalStr;
}

void AcfBrowserCToCpp::Focus() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, focus)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->focus(_struct);
}

void AcfBrowserCToCpp::SetVisible(bool visible) {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_visible)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_visible(_struct, visible);
}

bool AcfBrowserCToCpp::GetVisible() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_visible)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->get_visible(_struct);

  // Return type: bool
  return _retval ? true : false;
}

AcfRefPtr<AcfProfile> AcfBrowserCToCpp::GetProfile() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_profile)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_profile_t* _retval = _struct->get_profile(_struct);

  // Return type: refptr_same
  return AcfProfileCToCpp::Wrap(_retval);
}

size_t AcfBrowserCToCpp::GetFrameCount() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_frame_count)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  size_t _retval = _struct->get_frame_count(_struct);

  // Return type: simple
  return _retval;
}

void AcfBrowserCToCpp::GetFrameIdentifiers(std::vector<int64>& identifiers) {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_frame_identifiers)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Translate param: identifiers; type: simple_vec_byref
  size_t identifiersSize = identifiers.size();
  size_t identifiersCount = std::max(GetFrameCount(), identifiersSize);
  int64* identifiersList = NULL;
  if (identifiersCount > 0) {
    identifiersList = new int64[identifiersCount];
    DCHECK(identifiersList);
    if (identifiersList) {
      memset(identifiersList, 0, sizeof(int64) * identifiersCount);
    }
    if (identifiersList && identifiersSize > 0) {
      for (size_t i = 0; i < identifiersSize; ++i) {
        identifiersList[i] = identifiers[i];
      }
    }
  }

  // Execute
  _struct->get_frame_identifiers(_struct, &identifiersCount, identifiersList);

  // Restore param:identifiers; type: simple_vec_byref
  identifiers.clear();
  if (identifiersCount > 0 && identifiersList) {
    for (size_t i = 0; i < identifiersCount; ++i) {
      identifiers.push_back(identifiersList[i]);
    }
    delete[] identifiersList;
  }
}

void AcfBrowserCToCpp::GetFrameNames(std::vector<AcfString>& names) {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_frame_names)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Translate param: names; type: string_vec_byref
  acf_string_list_t namesList = acf_string_list_alloc();
  DCHECK(namesList);
  if (namesList) {
    transfer_string_list_contents(names, namesList);
  }

  // Execute
  _struct->get_frame_names(_struct, namesList);

  // Restore param:names; type: string_vec_byref
  if (namesList) {
    names.clear();
    transfer_string_list_contents(namesList, names);
    acf_string_list_free(namesList);
  }
}

AcfRefPtr<AcfFrame> AcfBrowserCToCpp::GetFrame(int64 identifier) {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_frame_byident)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_frame_t* _retval = _struct->get_frame_byident(_struct, identifier);

  // Return type: refptr_same
  return AcfFrameCToCpp::Wrap(_retval);
}

AcfRefPtr<AcfFrame> AcfBrowserCToCpp::GetFrame(const AcfString& name) {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_frame)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: name

  // Execute
  acf_frame_t* _retval = _struct->get_frame(_struct, name.GetStruct());

  // Return type: refptr_same
  return AcfFrameCToCpp::Wrap(_retval);
}

AcfRefPtr<AcfFrame> AcfBrowserCToCpp::GetMainFrame() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, get_main_frame)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  acf_frame_t* _retval = _struct->get_main_frame(_struct);

  // Return type: refptr_same
  return AcfFrameCToCpp::Wrap(_retval);
}

void AcfBrowserCToCpp::SetSettings(const AcfBrowserSettings& settings) {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_settings)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_settings(_struct, &settings);
}

void AcfBrowserCToCpp::SetAudioMuted(bool muted) {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_audio_muted)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->set_audio_muted(_struct, muted);
}

bool AcfBrowserCToCpp::IsAudioMuted() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, is_audio_muted)) {
    return false;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  int _retval = _struct->is_audio_muted(_struct);

  // Return type: bool
  return _retval ? true : false;
}

void AcfBrowserCToCpp::ToggleDevtools() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, toggle_devtools)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->toggle_devtools(_struct);
}

void AcfBrowserCToCpp::OpenTaskManager() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, open_task_manager)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->open_task_manager(_struct);
}

void AcfBrowserCToCpp::RaiseFindBar() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, raise_find_bar)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->raise_find_bar(_struct);
}

void AcfBrowserCToCpp::ZoomPage(acf_zoom_type_t zoom_type) {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, zoom_page)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->zoom_page(_struct, zoom_type);
}

void AcfBrowserCToCpp::ToggleExtensionsMenu() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, toggle_extensions_menu)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->toggle_extensions_menu(_struct);
}

void AcfBrowserCToCpp::ToggleDownloadUIForWindow() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, toggle_download_uifor_window)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->toggle_download_uifor_window(_struct);
}

void AcfBrowserCToCpp::ToggleMediaRouterBubble() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, toggle_media_router_bubble)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->toggle_media_router_bubble(_struct);
}

void AcfBrowserCToCpp::SendKeyEvent(const AcfKeyEvent& event) {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, send_key_event)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->send_key_event(_struct, &event);
}

void AcfBrowserCToCpp::SendMouseClickEvent(const AcfMouseEvent& event,
                                           MouseButtonType type,
                                           bool mouseUp,
                                           int clickCount) {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, send_mouse_click_event)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->send_mouse_click_event(_struct, &event, type, mouseUp, clickCount);
}

void AcfBrowserCToCpp::SendMouseMoveEvent(const AcfMouseEvent& event,
                                          bool mouseLeave) {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, send_mouse_move_event)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->send_mouse_move_event(_struct, &event, mouseLeave);
}

void AcfBrowserCToCpp::SendMouseWheelEvent(const AcfMouseEvent& event,
                                           int deltaX,
                                           int deltaY) {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, send_mouse_wheel_event)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->send_mouse_wheel_event(_struct, &event, deltaX, deltaY);
}

int AcfBrowserCToCpp::AddDocumentStartJavaScript(
    const AcfString& script,
    const std::vector<AcfString>& allow_origins) {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, add_document_start_java_script)) {
    return 0;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: script; type: string_byref_const
  if (script.empty()) {
    return 0;
  }
  // Unverified params: allow_origins

  // Translate param: allow_origins; type: string_vec_byref_const
  acf_string_list_t allow_originsList = acf_string_list_alloc();
  DCHECK(allow_originsList);
  if (allow_originsList) {
    transfer_string_list_contents(allow_origins, allow_originsList);
  }

  // Execute
  int _retval = _struct->add_document_start_java_script(
      _struct, script.GetStruct(), allow_originsList);

  // Restore param:allow_origins; type: string_vec_byref_const
  if (allow_originsList) {
    acf_string_list_free(allow_originsList);
  }

  // Return type: simple
  return _retval;
}

void AcfBrowserCToCpp::RemoveDocumentStartJavaScript(int script_id) {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, remove_document_start_java_script)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->remove_document_start_java_script(_struct, script_id);
}

void AcfBrowserCToCpp::AddWebMessageHostFactory(
    AcfRefPtr<AcfWebMessageFactory> factory,
    const AcfString& js_object_name,
    const std::vector<AcfString>& allow_origins) {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, add_web_message_host_factory)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: factory; type: refptr_diff
  if (!factory.get()) {
    return;
  }
  // Verify param: js_object_name; type: string_byref_const
  if (js_object_name.empty()) {
    return;
  }

  // Translate param: allow_origins; type: string_vec_byref_const
  acf_string_list_t allow_originsList = acf_string_list_alloc();
  DCHECK(allow_originsList);
  if (allow_originsList) {
    transfer_string_list_contents(allow_origins, allow_originsList);
  }

  // Execute
  _struct->add_web_message_host_factory(
      _struct, AcfWebMessageFactoryCppToC::Wrap(factory),
      js_object_name.GetStruct(), allow_originsList);

  // Restore param:allow_origins; type: string_vec_byref_const
  if (allow_originsList) {
    acf_string_list_free(allow_originsList);
  }
}

void AcfBrowserCToCpp::RemoveWebMessageHostFactory(
    const AcfString& js_object_name) {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, remove_web_message_host_factory)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: js_object_name; type: string_byref_const
  if (js_object_name.empty()) {
    return;
  }

  // Execute
  _struct->remove_web_message_host_factory(_struct, js_object_name.GetStruct());
}

void AcfBrowserCToCpp::AddFunctionRegisterHostFactory(
    AcfRefPtr<AcfFunctionFactory> factory,
    const AcfString& js_object_name,
    const AcfString& function_name,
    const std::vector<AcfString>& allow_origins) {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, add_function_register_host_factory)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: factory; type: refptr_diff
  if (!factory.get()) {
    return;
  }
  // Verify param: js_object_name; type: string_byref_const
  if (js_object_name.empty()) {
    return;
  }
  // Verify param: function_name; type: string_byref_const
  if (function_name.empty()) {
    return;
  }

  // Translate param: allow_origins; type: string_vec_byref_const
  acf_string_list_t allow_originsList = acf_string_list_alloc();
  DCHECK(allow_originsList);
  if (allow_originsList) {
    transfer_string_list_contents(allow_origins, allow_originsList);
  }

  // Execute
  _struct->add_function_register_host_factory(
      _struct, AcfFunctionFactoryCppToC::Wrap(factory),
      js_object_name.GetStruct(), function_name.GetStruct(), allow_originsList);

  // Restore param:allow_origins; type: string_vec_byref_const
  if (allow_originsList) {
    acf_string_list_free(allow_originsList);
  }
}

void AcfBrowserCToCpp::RemoveFunctionRegisterHostFactory(
    const AcfString& js_object_name) {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, remove_function_register_host_factory)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: js_object_name; type: string_byref_const
  if (js_object_name.empty()) {
    return;
  }

  // Execute
  _struct->remove_function_register_host_factory(_struct,
                                                 js_object_name.GetStruct());
}

void AcfBrowserCToCpp::SendDevToolsMessage(const void* message,
                                           size_t message_size) {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, send_dev_tools_message)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: message; type: simple_byaddr
  if (!message) {
    return;
  }

  // Execute
  _struct->send_dev_tools_message(_struct, message, message_size);
}

AcfRefPtr<AcfRegistration> AcfBrowserCToCpp::AddDevToolsMessageObserver(
    AcfRefPtr<AcfDevToolsMessageObserver> observer) {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, add_dev_tools_message_observer)) {
    return nullptr;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: observer; type: refptr_diff
  if (!observer.get()) {
    return nullptr;
  }

  // Execute
  acf_registration_t* _retval = _struct->add_dev_tools_message_observer(
      _struct, AcfDevToolsMessageObserverCppToC::Wrap(observer));

  // Return type: refptr_same
  return AcfRegistrationCToCpp::Wrap(_retval);
}

void AcfBrowserCToCpp::ImeSetComposition(
    const AcfString& text,
    const std::vector<AcfCompositionUnderline>& underlines,
    const AcfRange& replacement_range,
    const AcfRange& selection_range) {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, ime_set_composition)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: text, underlines

  // Translate param: underlines; type: simple_vec_byref_const
  const size_t underlinesCount = underlines.size();
  acf_composition_underline_t* underlinesList = NULL;
  if (underlinesCount > 0) {
    underlinesList = new acf_composition_underline_t[underlinesCount];
    DCHECK(underlinesList);
    if (underlinesList) {
      for (size_t i = 0; i < underlinesCount; ++i) {
        underlinesList[i] = underlines[i];
      }
    }
  }

  // Execute
  _struct->ime_set_composition(_struct, text.GetStruct(), underlinesCount,
                               underlinesList, &replacement_range,
                               &selection_range);

  // Restore param:underlines; type: simple_vec_byref_const
  if (underlinesList) {
    delete[] underlinesList;
  }
}

void AcfBrowserCToCpp::ImeCommitText(const AcfString& text,
                                     const AcfRange& replacement_range,
                                     int relative_cursor_pos) {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, ime_commit_text)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: text

  // Execute
  _struct->ime_commit_text(_struct, text.GetStruct(), &replacement_range,
                           relative_cursor_pos);
}

void AcfBrowserCToCpp::ImeFinishComposingText(bool keep_selection) {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, ime_finish_composing_text)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->ime_finish_composing_text(_struct, keep_selection);
}

void AcfBrowserCToCpp::ImeCancelComposition() {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, ime_cancel_composition)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->ime_cancel_composition(_struct);
}

void AcfBrowserCToCpp::CaptureScreenshot(
    bool fast_encoded,
    bool from_surface,
    AcfRefPtr<AcfCompleteValueHandler> handler) {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, capture_screenshot)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: handler; type: refptr_diff
  if (!handler.get()) {
    return;
  }

  // Execute
  _struct->capture_screenshot(_struct, fast_encoded, from_surface,
                              AcfCompleteValueHandlerCppToC::Wrap(handler));
}

void AcfBrowserCToCpp::SetContextProfile(AcfRefPtr<AcfValue> context_profile) {
  acf_browser_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, set_context_profile)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: context_profile; type: refptr_same
  if (!context_profile.get()) {
    return;
  }

  // Execute
  _struct->set_context_profile(_struct,
                               AcfValueCToCpp::Unwrap(context_profile));
}

// CONSTRUCTOR - Do not edit by hand.

AcfBrowserCToCpp::AcfBrowserCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

AcfBrowserCToCpp::~AcfBrowserCToCpp() {}

template <>
acf_browser_t*
AcfCToCppRefCounted<AcfBrowserCToCpp, AcfBrowser, acf_browser_t>::UnwrapDerived(
    AcfWrapperType type,
    AcfBrowser* c) {
  return nullptr;
}

template <>
AcfWrapperType AcfCToCppRefCounted<AcfBrowserCToCpp,
                                   AcfBrowser,
                                   acf_browser_t>::kWrapperType = WT_BROWSER;
