// Copyright (c) 2025 Admenri. All rights reserved.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the ACF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//
// $hash=91aa0ab501f1239e483af9bd6a6bb878d6a57bda$
//

#include "libacf_dll/ctocpp/file_dialog_callback_ctocpp.h"

#include "libacf_dll/transfer_util.h"

// VIRTUAL METHODS - Body may be edited by hand.

void AcfFileDialogCallbackCToCpp::Continue(
    bool use_default,
    const std::vector<AcfString>& file_paths,
    const AcfString& base_path) {
  acf_file_dialog_callback_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, cont)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Unverified params: file_paths, base_path

  // Translate param: file_paths; type: string_vec_byref_const
  acf_string_list_t file_pathsList = acf_string_list_alloc();
  DCHECK(file_pathsList);
  if (file_pathsList) {
    transfer_string_list_contents(file_paths, file_pathsList);
  }

  // Execute
  _struct->cont(_struct, use_default, file_pathsList, base_path.GetStruct());

  // Restore param:file_paths; type: string_vec_byref_const
  if (file_pathsList) {
    acf_string_list_free(file_pathsList);
  }
}

void AcfFileDialogCallbackCToCpp::Cancel() {
  acf_file_dialog_callback_t* _struct = GetStruct();
  if (ACF_MEMBER_MISSING(_struct, cancel)) {
    return;
  }

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  _struct->cancel(_struct);
}

// CONSTRUCTOR - Do not edit by hand.

AcfFileDialogCallbackCToCpp::AcfFileDialogCallbackCToCpp() {}

// DESTRUCTOR - Do not edit by hand.

AcfFileDialogCallbackCToCpp::~AcfFileDialogCallbackCToCpp() {}

template <>
acf_file_dialog_callback_t* AcfCToCppRefCounted<
    AcfFileDialogCallbackCToCpp,
    AcfFileDialogCallback,
    acf_file_dialog_callback_t>::UnwrapDerived(AcfWrapperType type,
                                               AcfFileDialogCallback* c) {
  return nullptr;
}

template <>
AcfWrapperType AcfCToCppRefCounted<AcfFileDialogCallbackCToCpp,
                                   AcfFileDialogCallback,
                                   acf_file_dialog_callback_t>::kWrapperType =
    WT_FILE_DIALOG_CALLBACK;
